<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_e</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

moveSpeed = 0.25; //Move every quarter second
attackSpeed = 1; //Attack once every second

pattern = 2;
range = 1;

sightRange = 360; //In pixels (half of the width of the screen)


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>startX = x;
startY = y;

if( global.master.turn == 'e')
{
    timeSinceMove += delta_time/1000000;
    
    if( timeSinceMove &gt;= moveSpeed )
    {
        if ( !path_exists(path) )
            { path = path_add(); }   
        
        canSee = !collision_line(x, y, global.player.x, global.player.y, obj_wall, false, true);
        inRadius = distance_to_point(global.player.x, global.player.y) &lt; sightRange;
        
        if(canSee and inRadius)
        {
            goalX = global.player.x;
            goalY = global.player.y;
            
            if( y &lt; goalY ) { goalY -= global.tileSize; }
            else if( y &gt; goalY ) { goalY += global.tileSize; } 
            else if( x &lt; goalX ) { goalX -= global.tileSize; }
            else if( x &gt; goalX ) { goalX += global.tileSize; } 
                
            if( mp_grid_path(global.grid, path, x, y, goalX, goalY, false) )
                { path_start(path, 32, path_action_stop, false); }
                
            timeSinceMove = 0;
            path_speed = global.tileSize;
        }
    }
    
    if( x+range*global.tileSize &gt;= global.player.x and x-range*global.tileSize &lt;= global.player.x )
    {
        if( y+range*global.tileSize &gt;= global.player.y and y-range*global.tileSize &lt;= global.player.y )
        {
            in_attack_pos = true;
        }
    }
    
    if(in_attack_pos)
    {
        time_since_attack += delta_time/1000000;
        
        if( time_since_attack &gt; attackSpeed ) 
        { 
            e_attack(id); 
            time_since_attack = 0;
        }
    }
}
else if( global.master.turn == 'p' ) 
{
    if( path_exists(path) ) { path_delete(path); }
    in_attack_pos = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
