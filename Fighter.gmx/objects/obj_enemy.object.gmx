<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_e</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxHealth = 100;
myHealth = maxHealth; 
lastHealth = myHealth;

dodgeTime = 0.7; //Dodge @ 70% 

atk = 1;
def = 1;

checked = false;

movSpd = 2;

//Particle system
mySys = part_system_create();
part_system_position(mySys, x, y);
part_system_depth(mySys, -20);

//Particles
myPart = part_type_create();
part_type_shape(myPart, pt_shape_disk);
part_type_size(myPart, 0.15, 0.3, -0.02, 0);
part_type_color1(myPart, c_red);
part_type_life(myPart, room_speed*1.0, room_speed*1.5);
part_type_speed(myPart, 3, 12, -0.5, 0);


//Particle Emitters
emit = part_emitter_create(mySys);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(checkHit(id, "basic1", obj_player))
    { global.player.targetOf[array_length_1d(global.player.targetOf)] = id; } 
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
part_system_position(mySys, x+16, y+16);
if(lastHealth &gt; myHealth)
{  
    dir = point_direction(x, y, global.player.x, global.player.y);
    part_type_direction(myPart, dir+170, dir+190, 0, 0);
    part_emitter_burst(mySys, emit, myPart, lastHealth-myHealth);
}

lastHealth = myHealth;

if(myHealth &lt; 0) 
{ 
    myHealth = 0; 
    alarm[0] = 1;
} 

//if(global.master.turn == 'p' and global.player.time == global.player.timeLimit and !global.player.dodged)
/*
if(global.player.time == global.player.timeLimit)
{
    if(checkHit(id, "basic1", obj_player) != noone)
        { attack( enemyAtkDmg( object_get_name(id), global.player.eq ), atk, global.enemy.def, global.player ); }
}
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(global.master.turn == 'e') 
    { draw_sprite(asset_get_index("spr_e"), 0, x, y); }
else if (global.master.turn == 'p')
    { draw_sprite_ext(asset_get_index("spr_e"), 0, x, y, 1, 1, 0, global.darkened, 1); }
*/
    
draw_self();    
    
height = 5;

draw_set_alpha(0.7);

//Faded background
draw_set_colour(c_black);
draw_rectangle( x, y, x+sprite_get_width(sprite_index), y+height, false );


draw_set_alpha(1);


//Health
draw_set_color(c_red);
draw_rectangle( x, y, x+(sprite_get_width(sprite_index)*(myHealth/maxHealth)), y+height, false );

//Outline
draw_set_colour(c_black);
draw_rectangle( x, y, x+sprite_get_width(sprite_index), y+height, true );


draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
