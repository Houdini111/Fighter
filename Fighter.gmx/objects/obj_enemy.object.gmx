<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_e</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path = path_add();

in_attack_pos = false;
timeSinceMove = 0;
time_since_attack = 0;

maxrot = 180; //Default 30 (in each direction)
rotstep = 10; //Default 10
ahead = 3; //Default 5
onspot = true; //Default true
mp_potential_settings(maxrot, rotstep, ahead, onspot);

seen = true;

startX = x;
startY = y;
nextX = x;
nextY = y;


//SET THE FOLLOWING FOR EACH UNIQUE ENEMY
maxHealth = 100;
myHealth = maxHealth;
atk = 100;
def = 100;

move_tick = 0.25; //In seconds
attackSpeed = 1; //In seconds
MAX_SPEED = global.gridSize/8; //How much to move divded by how may frames it should take

pattern = 1;
range = 1;

sightRange = 360; //In pixels (half of the width of the screen)

my_col = merge_color(c_white, c_green, 0.7 );
my_shade = merge_color(global.darkened, my_col, 0.5 );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_rhy_base) { if( parent == other.id ) { instance_destroy(); } }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( x == nextX )
{
    mp_grid_clear_cell(global.grid, floor(startX/global.gridSize), floor(startY/global.gridSize));
    mp_grid_add_cell(global.grid, floor(x/global.gridSize), floor(y/global.gridSize));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(myHealth &lt;= 0) { instance_destroy(); }

seen = "n/a";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.master.turn == 'e')
{
    timeSinceMove += delta_time/1000000;
    
    if( (nextX != x) or (nextY != y) )
    {
        if( nextX &gt; x ) { x += min( MAX_SPEED, nextX-x ); }
        else { x -= min( MAX_SPEED, x-nextX ); }
        
        if( nextY &gt; y ) { y += min( MAX_SPEED, nextY-y ); }
        else { y -= min( MAX_SPEED, y-nextY ); }
    }
    
    
    if( timeSinceMove &gt;= move_tick )
    {
        if ( !path_exists(path) )
            { path = path_add(); }   
        
        if(canSee == "n/a")
        {
            canSee = !collision_line(x, y, global.player.x, global.player.y, obj_wall, false, true);
            inRadius = distance_to_point(global.player.x, global.player.y) &lt; sightRange;
        }
        
        if(canSee and inRadius)
        {
            mp_grid_clear_cell(global.grid, floor(x/global.gridSize), floor(y/global.gridSize));
            path_delete(path);
            path = path_add();
            
            var places = e_check_spots(global.player, global.gridSize, range, global.grid);            
            
            //If there is an available spot
            if(ds_list_size(places[0]) &gt; 0)
            {
                goalX = ds_list_find_value(places[0], 0);
                goalY = ds_list_find_value(places[1], 0);
                //Find the closest open spot   
                for(i = 0; i &lt; ds_list_size(places[1]); i++)
                {
                    if( distance_to_point(goalX, goalY) &gt; distance_to_point( ds_list_find_value(places[0], i), ds_list_find_value(places[1], i) ) )
                    {
                        goalX = ds_list_find_value(places[0], i);
                        goalY = ds_list_find_value(places[1], i)
                    }
                }
                
                
                if( mp_grid_path(global.grid, path, x, y, goalX, goalY, false) )
                { 
                    timeSinceMove = 0;
                    
                    var len = path_get_length(path); 
                    startX = x;
                    startY = y;
                    nextX = path_get_x(path, 32/len);
                    nextY = path_get_y(path, 32/len);
                    mp_grid_add_cell(global.grid, floor(nextX/global.gridSize), floor(nextY/global.gridSize));
                }
                    
            }
              
            mp_grid_add_cell(global.grid, floor(x/global.gridSize), floor(y/global.gridSize));  
            ds_list_destroy(places[0]);
            ds_list_destroy(places[1]);
        }
    }
    

    
    var myGridX = floor(x/global.tileSize);
    var myGridY = floor(y/global.tileSize);
    var pGridX = floor(global.player.x/global.tileSize);
    var pGridY = floor(global.player.y/global.tileSize);
    
    if( abs(myGridX - pGridX) + abs(myGridY - pGridY) &lt;= range )
    {
        in_attack_pos = true;
        //time_since_attack = attackSpeed;
    }   
    
    
    if(in_attack_pos)
    {
        time_since_attack += delta_time/1000000;
        
        if( time_since_attack &gt; attackSpeed ) 
        { 
            e_attack(id); 
            time_since_attack = 0;
        }
    }
}
else if( global.master.turn == 'p' ) 
{
    if( path_exists(path) ) { path_delete(path); }
    in_attack_pos = false;
    canSee = "n/a";
    inRadius = "n/a";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.master.debug_ui )
{
    if( path_exists(path) ) 
    { 
        draw_set_color(c_red);
        draw_path(path, x, y, true); 
        draw_set_color(c_black);
    }
    draw_set_color(c_black);
    draw_circle(x, y, sightRange, true);
    canSee = !collision_line(x, y, global.player.x, global.player.y, obj_wall, false, true);
    if(canSee) { draw_set_color(c_green); } 
    else { draw_set_color(c_red); }
    inRadius = distance_to_point(global.player.x, global.player.y) &lt; sightRange;
    if(inRadius) { draw_line(x, y, global.player.x, global.player.y); }
}

if( seen or !global.master.fow )
{
    if(global.master.turn == 'p' or global.master.turn == 'pause') { image_blend = my_shade; }
    else if (global.master.turn == 'e') { image_blend = my_col; }
    draw_self();
    
    if(global.master.ui)
    {
        draw_set_color(c_black);
        draw_rectangle(x-sprite_width/2, y-sprite_height/2, x+sprite_width/2, y-sprite_height/2+3, false);
        draw_set_color(c_red);
        draw_rectangle(x-sprite_width/2, y-sprite_height/2, x-sprite_width/2+(sprite_width*myHealth/maxHealth), y-sprite_height/2+3, false);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
