<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_rhy_base</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>left = global.player.rhythm_left;
right = global.player.rhythm_left+global.player.rhythm_width;
top = global.player.rhythm_top;
bottom = global.player.rhythm_top+global.player.rhythm_height;

dist_in_one_sec = bottom-global.player.judgement.y;

path_height = top - bottom;
path_width = right - left;

lanes = global.player.lanes;

width = (path_width-6)/lanes;
height = 20*global.res_scale; //ADD MENU OPTION TO CHANGE THIS

x = left;
y = bottom;

my_color = c_white;
draw_border = 0.06;



var base_width = sprite_get_width(spr_rhy_base);
resize_rhythm_peices(width/base_width, 1);





mask_index = object_get_mask(obj_rhy_base);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_delete(global.rhy, ds_list_find_index(global.rhy, id));

if(y &lt;= top) 
{ 
    global.player.myHealth -= damage_calculation(parent, global.player);
    global.camera.alarm[0] = 1;
    if( object_get_name( parent.object_index ) == "obj_tut_counter_enemy" )
        { parent.myHealth = parent.maxHealth; }
}
else
{
    if( object_get_name( parent.object_index ) == "obj_tut_counter_enemy" )
        { parent.myHealth -= parent.maxHealth/3; }
        
        
    
    var phan = instance_create(x, y, obj_rhy_phantom);
    phan.width = width;
    phan.height = height;
    
    with(phan)
    {
        my_part_sys = part_system_create();
        part_system_automatic_draw(my_part_sys, false);
        
        max_life = 60;
        max_angle = 10;
        max_size = 0.1;
        max_speed = 5;
        my_part = part_type_create();
        part_type_shape(my_part, pt_shape_square);
        part_type_size(my_part, max_size/2, max_size, 0.00, 0.00);
        //part_type_size(my_part, 0.1, 0.1, 0.00, 0.00);
        //part_type_scale(my_part, 1, 1);
        part_type_color1(my_part, other.my_color);
        //part_type_colour2(my_part, 16777215, 12632256);
        //part_type_alpha3(my_part, 0, 0.20, 0);
        part_type_speed(my_part, max_speed/2, max_speed, max_speed/10, 0);
        //part_type_speed(my_part, 0, 0, 0, 0);
        part_type_direction(my_part, 90-max_angle, 90+max_angle, 0, 10);
        //part_type_orientation(my_part, 0, 359, 0, 0, 1);
        //part_type_blend(my_part, 0);
        part_type_life(my_part, max_life/2, max_life);
        
        my_burst = part_emitter_create(my_part_sys);
        part_emitter_region(my_part_sys, my_burst, x, x+other.width, y-other.height/2, y+other.height/2, ps_shape_rectangle, ps_distr_linear);
        //part_emitter_region(my_part_sys, my_burst, 50, 100, 50, 50, ps_shape_rectangle, ps_distr_linear);
        part_emitter_burst(my_part_sys, my_burst, my_part, 20);
        alarm[0] = max_life;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.player.dodge_go )
{
    if( global.master.turn == 'p' or global.master.turn == 'e')
    { 
        y -= (delta_time/1000000)*dist_in_one_sec*(global.master.rhy_speed/10);
    }
    
    if(y+height &lt; top) { instance_destroy(); }
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.master.ui and global.player.dodge_go)
{   
    h_top = max(y-height/2, top);
    if(y-height/2 &gt; bottom) { h_bottom = h_top; } //If it hasn't begun to show yet
    else if( y+height/2 &gt; bottom ) { h_bottom = bottom; } //If it has only started peeking
    else { h_bottom = y+height/2; } //If the bottom of the peice has separated from the bottom
    
    draw_set_blend_mode(bm_normal);
    draw_set_alpha(1);
    draw_set_color(c_black);
    draw_rectangle(x, h_top, x+width, h_bottom, false);
    
    draw_set_alpha(0.85);
    draw_set_color(my_color);
    draw_rectangle(x, h_top, x+width, h_bottom, false);
    draw_set_alpha(1);
    draw_rectangle(x+width*draw_border, h_top+height*draw_border, x+width*(1-draw_border), h_bottom-height*draw_border, false);
    
    if(global.master.debug_ui)
    {
        draw_set_color(c_red);
        draw_line(x, y, x+width, y);
        draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, true);
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
