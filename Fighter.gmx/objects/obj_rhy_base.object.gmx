<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_rhy_base</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>left = global.player.rhythm_left;
right = global.player.rhythm_left+global.player.rhythm_width;
top = global.player.rhythm_top;
bottom = global.player.rhythm_top+global.player.rhythm_height;

path_height = top - bottom;
path_width = right - left;

lanes = global.player.lanes;

width = (path_width-6)/lanes;
height = 20;

x = left;
y = bottom;

my_color = c_white;
draw_border = 0.06;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_delete(global.rhy, ds_list_find_index(global.rhy, id));

if(y &lt;= top) 
{ 
    global.player.myHealth -= damage_calculation(parent, global.player);
    global.camera.alarm[0] = 1;
    if( object_get_name( parent.object_index ) == "obj_tut_counter_enemy" )
        { parent.myHealth = parent.maxHealth; }
}
else
{
    if( object_get_name( parent.object_index ) == "obj_tut_counter_enemy" )
        { parent.myHealth -= parent.maxHealth/3; }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.player.dodge_go )
{
    if( global.master.turn == 'p' or global.master.turn == 'e')
        { y -= delta_time/10000*global.master.rhy_speed; }
    
    if(y+height &lt; top) { instance_destroy(); }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.master.ui and global.player.dodge_go)
{
    h_top = max(y, top);
    if(y &gt; bottom) { h_bottom = h_top; }
    else { h_bottom = min(y+height, bottom); }
    
    draw_set_blend_mode(bm_normal);
    draw_set_alpha(1);
    draw_set_color(c_black);
    draw_rectangle(x, h_top, x+width, h_bottom, false);
    
    draw_set_alpha(0.85);
    draw_set_color(my_color);
    draw_rectangle(x, h_top, x+width, h_bottom, false);
    draw_set_alpha(1);
    draw_rectangle(x+width*draw_border, h_top+height*draw_border, x+width*(1-draw_border), h_bottom-height*draw_border, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
