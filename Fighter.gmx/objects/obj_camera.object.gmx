<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shake = false;

offsetX = 0;
//offsetY = 0;

magnitude = 10;




//Display management
ideal_width = 0;
ideal_height = 360;
//ideal_height = 1080;

aspect_ratio = display_get_width()/display_get_height();

ideal_width = round(ideal_height*aspect_ratio);


if(display_get_width() % ideal_width != 0)
{
    var d = round(display_get_width()/ideal_width);
    ideal_width=display_get_width()/d;
}
if(display_get_height() % ideal_height != 0)
{
    var d = round(display_get_height()/ideal_height);
    ideal_height=display_get_height()/d;
}


if(ideal_width &amp; 1) { ideal_width++; }
if(ideal_height &amp; 1) { ideal_height++; }

for(var i = 1; i &lt;= room_last; i++)
{
    if(room_exists(i))
    {
        room_set_view(i, 0, true, 0, 0, ideal_width, ideal_height, 0, 0, ideal_width, ideal_height, 0, 0, 0, 0, -1 );
        room_set_view_enabled(i, true);
    }
}

surface_resize(application_surface, ideal_width, ideal_height);
display_set_gui_size(ideal_width, ideal_height);
window_set_size(ideal_width, ideal_height);


window_zoom = 1;
before_max = window_zoom;
max_window_zoom = floor(display_get_width()/ideal_width);

view_zoom = 1;
view_max_zoom = 10;
zoom_speed = 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resize window
window_set_size(ideal_width*window_zoom, ideal_height*window_zoom);   
surface_resize(application_surface, ideal_width*window_zoom, ideal_height*window_zoom);
alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center window
window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop shaking
shake = false;
offsetX = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start shaking
shake = true;
alarm[1] = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( room_get_name(room) != "rm_pause" )
{
    var xDiff = global.player.x - x;
    var yDiff = global.player.y - y;
    
    x += xDiff;
    y += yDiff;
    
    //Move view
    view_xview = x - view_wview/2;
    view_yview = y - view_hview/2;
    //Make sure that it doesn't go out of the room
    view_xview = max(0, min(view_xview, room_width - view_wview));
    view_yview = max(0, min(view_yview, room_height - view_hview));
    
    view_xview[0] += offsetX;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(shake) { offsetX = irandom_range(-(magnitude), magnitude); }

if(keyboard_check_pressed(vk_f1))
{
    if(window_zoom &gt; 1)
    {
        window_zoom--;
        window_set_size(ideal_width*window_zoom, ideal_height*window_zoom);   
        surface_resize(application_surface, ideal_width*window_zoom, ideal_height*window_zoom);
        alarm[2] = 1;
    }
}
else if(keyboard_check_pressed(vk_f2))
{
    if(window_zoom &lt; max_window_zoom)
    {
        window_zoom++;
        window_set_size(ideal_width*window_zoom, ideal_height*window_zoom);
        surface_resize(application_surface, ideal_width*window_zoom, ideal_height*window_zoom);
        alarm[2] = 1;
    }
}

//if(keyboard_check(vk_up)) { view_zoom+=zoom_speed; }
//else if(keyboard_check(vk_down)) { view_zoom-=zoom_speed; }
view_zoom=clamp(view_zoom, 1, view_max_zoom);
view_wview=ideal_width/view_zoom;
view_hview=ideal_height/view_zoom;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
