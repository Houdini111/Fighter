<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_p</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.player = id;

rot = 0;

maxHealth = 100;
myHealth = maxHealth;

atk = 100;
def = 100;


rhythm_left = view_wview[0]*.8;
rhythm_width = view_wview[0]*.2-10;
rhythm_top = view_hview[0]*.2;
rhythm_height = view_hview[0]*.8-10;

lanes = 4;

judgement = judgement_line(rhythm_left, rhythm_width, rhythm_top, rhythm_height);


dPad = array(0, 0, 0, 0); //Time held for DPad Up, right, down, and left
MOVE_REPEAT_DELAY = 0.25;

goal_x = x;
goal_y = y;
MOVE_STEPS = 8;
MAX_SPEED = global.gridSize/MOVE_STEPS;


fov_surf = surface_create(view_wview[0], view_wview[0]);
fov_size = 120;



//Language
// 0 == a1 (lb)
// 1 == a2 (rb)

state = 0;

//First number is the current state
//This column is for "a" buttons
    //This column is for "x" buttons
    
    //--- means unused
    //! means part of a dead-end accept state (so don't use it)
st[0, 0] = 1;
    st[0, 1] = 6;//REJECT
st[1, 0] = 2;
    st[1, 1] = 6;//REJECT
st[2, 0] = 3;    //ACCEPT
    st[2, 1] = 4;
st[3, 0] = 0;//!
    st[3, 1] = 0;//!
st[4, 0] = 7;
    st[4, 1] = 5;//ACCEPT
st[5, 0] = 0;//!
    st[5, 1] = 0;//!
st[6, 0] = 6;    //REJECT
    st[6, 1] = 6;//REJECT
st[7, 0] = 6;    //REJECT
    st[7 , 1] = 8 
st[8, 0] = 6;    //REJECT
    st[8, 1] = 9;//ACCEPT
st[9, 0] = 0;//!
    st[9, 1] = 0;//!
st[10, 0] = 6;//---
    st[10, 1] = 6;//---
st[11, 0] = 0;//---
    st[11, 1] = 0;//---
    
//Reject states
r[0] = 6; 



/*
//Particle system
mySys = part_system_create();
part_system_position(mySys, x, y);
part_system_depth(mySys, -20);

//Particles
myPart = part_type_create();
part_type_shape(myPart, pt_shape_disk);
part_type_size(myPart, 0.15, 0.3, -0.02, 0);
part_type_color1(myPart, c_red);
part_type_life(myPart, room_speed*1.0, room_speed*1.5);
part_type_direction(myPart, -10, 10, 0, 0);
part_type_speed(myPart, 3, 12, -0.5, 0);


//Particle Emitters
emit = part_emitter_create(mySys);
//part_emitter_burst(mySys, emit, myPart, 25);
*/





turnStart = current_time;

show_debug_message("ROOM CREATED IN: " + string(room_get_name(room))+"  pos: " + string(x) + ", "+ string(y) + "  ID: " + string(id));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.master.turn == 'p' )
    { mp_grid_clear_cell(global.grid, floor(x/global.gridSize), floor(y/global.gridSize) ); }
else if ( global.master.turn == 'e' ) 
    { mp_grid_add_instances(global.grid, obj_player, false); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>oldX = x;
oldY = y;



if( keyboard_check_pressed( vk_f5 ) ) { gp_check(); }

if(global.master.turn == 'pause')
{
    
}
else
{   
    if( global.master.fow )
    {
        if(!surface_exists(fov_surf)) { fov_surf = surface_create(room_width, room_height); }
        surface_set_target(fov_surf);
        draw_clear(c_ltgray);
        draw_set_color(c_black);
        fov(x, y, 1000, rot, fov_size, fov_size/1, false, obj_impassable);
        surface_reset_target();
    }

    if(global.master.turn == 'p')
    {
        //Look around
        var stickDir = global.in[? "r_dir"];
        var stickDist = point_distance(0, 0, global.in[? "r_x"], global.in[? "r_y"] );
        if( stickDist &gt; 0 ) 
        {
            if( global.in[? "r_press"] )
                { rot = global.in[? "r_dir"]; }
            else
            {
                if( stickDir &gt;= 315 or stickDir &lt;= 45 ) { rot = 0; }
                else if( stickDir &gt; 45 and stickDir &lt; 135 ) { rot = 90; }
                else if( stickDir &gt;= 135 and stickDir &lt;= 225 ) { rot = 180; }
                else if( stickDir &gt; 225 and stickDir &lt; 315 ) { rot = 270; }        
            }
        }
    
        var old_goal_x = goal_x;
        var old_goal_y = goal_y;
        //Move around
        if(global.in[? "m_up_p"]) //dpad_up first press
            { goal_y-=32; }
        if(global.in[? "m_up"]) //dpad_up hold
            {  global.in[? "m_up_h"]+= delta_time/1000000; } //Adds how many seconds the button has been held
        else { global.in[? "m_up_h"] = 0; } 
        
        if(global.in[? "m_down_p"]) //dpad_down first press
            { goal_y+=32; }
        if(global.in[? "m_down"]) //dpad_down hold
            { global.in[? "m_down_h"] += delta_time/1000000; } //Adds how many seconds the button has been held 
        else { global.in[? "m_down_h"] = 0; } 
        
        if(global.in[? "m_left_p"]) //dpad_left first press
            { goal_x-=32; }
        if(global.in[? "m_left"]) //dpad_left hold
            {  global.in[? "m_left_h"] += delta_time/1000000; } //Adds how many seconds the button has been held 
        else { global.in[? "m_left_h"] = 0; } 
        
        if(global.in[? "m_right_p"]) //dpad_right first press
            { goal_x+=32; }
        if(global.in[? "m_right"]) //dpad_right hold
            {  global.in[? "m_right_h"] += delta_time/1000000; } //Adds how many seconds the button has been held 
        else { global.in[? "m_right_h"] = 0; } 
        
        
        //Every half second, try to move again
        if( global.in[? "m_up_h"] &gt;= MOVE_REPEAT_DELAY ) 
        { 
            global.in[? "m_up_h"] = 0;
            goal_y-=32;
        }
        if( global.in[? "m_right_h"] &gt;= MOVE_REPEAT_DELAY ) 
        { 
            global.in[? "m_right_h"] = 0;
            goal_x+=32;
        }
        if( global.in[? "m_down_h"] &gt;= MOVE_REPEAT_DELAY ) 
        { 
            global.in[? "m_down_h"] = 0;
            goal_y+=32;
        }
        if( global.in[? "m_left_h"] &gt;= MOVE_REPEAT_DELAY ) 
        { 
            global.in[? "m_left_h"] = 0;
            goal_x-=32;
        }
        
        
        if( !check_move(id, goal_x, old_goal_y) ) //Can they move to the new x?
            { goal_x = old_goal_x; }   //If not, move back
        
        if( !check_move(id, old_goal_x, goal_y) ) //Can they move to the new Y?
            { goal_y = old_goal_y; }
            
        
            
        if( goal_x &gt; x ) { x += min( MAX_SPEED, goal_x-x ); }
        else { x -= min( MAX_SPEED, x-goal_x ); }
        
        if( goal_y &gt; y ) { y += min( MAX_SPEED, goal_y-y ); }
        else { y -= min( MAX_SPEED, y-goal_y ); }
    
        if( global.in[? "a_1_p"] ) { key = 0; }
        else if( global.in[? "a_2_p"] ) { key = 1; }
        else { key = '$' }
        
        if ( key != '$' )
        {
            state = st[state, key]; 
            
            switch (state)
            {
                case 3:  
                    //0, 1, 2, 3
                    //0, 0, 0
                    p_attack(id, 1);
                    state = 0;
                    break;
                case 5: 
                    //0, 1, 2, 4, 5
                    //0, 0, 1, 1
                    p_attack(id, 2, 1.3);
                    state = 0;
                    break;
                case 6: 
                    //time -= 50;
                    state = 0;
                    break;
                case 9:
                    //0, 1, 2, 4, 7, 8, 9
                    //0, 0, 1, 0, 1, 1,    
                    p_attack(id, 3, 1.75);
                    state = 0;
                    break;
                default: 
                    break;
            }            
        }
        
        var h;
        //Interactable in front of player?
        if( rot &gt;= 315 or rot &lt;= 45 ) //rot == 0
            { h = collision_point(x+global.gridSize, y, obj_interactable, false, true); }
        else if( rot &gt; 45 and rot &lt; 135 ) //rot == 90
            { h = collision_point(x, y-global.gridSize, obj_interactable, false, true); }
        else if( rot &gt;= 135 and rot &lt;= 225 ) //rot == 180
            { h = collision_point(x-global.gridSize, y, obj_interactable, false, true); }   
        else if( rot &gt; 225 and rot  &lt; 315 ) //rot == 270
            { h = collision_point(x, y+global.gridSize, obj_interactable, false, true); }
        
        if( h != noone) 
        {  
            instance_activate_object( h.my_prompt );
            if( global.in[? "a_4_p"] ) { h.state = !h.state; }
        }
        
        
        
    }
    else if( global.master.turn == 'e' ) 
    { 
        if( goal_x &gt; x ) { x += min( MAX_SPEED, goal_x-x ); }
        else { x -= min( MAX_SPEED, x-goal_x ); }
        
        if( goal_y &gt; y ) { y += min( MAX_SPEED, goal_y-y ); }
        else { y -= min( MAX_SPEED, y-goal_y ); }
    
        state = 0; 
        
        if( rot &gt;= 315 or rot &lt;= 45 ) { rot = 0; }
        else if( rot &gt; 45 and rot &lt; 135 ) { rot = 90; }
        else if( rot &gt;= 135 and rot &lt;= 225 ) { rot = 180; }
        else if( rot &gt; 225 and rot  &lt; 315 ) { rot = 270; }
    }
    
    //Non-turn specific actions (dodging) 
    if( global.in[? "d_1_p"] ) //X
    {  
        h = collision_point(rhythm_left+((rhythm_width/lanes)*.5), judgement.y, obj_rhy_base, false, true);
        if( h != noone) //Check if there is a peice in the judgement line
            { show_debug_message("HERE"); with(h) { instance_destroy(); } }
    }
    if( global.in[? "d_2_p"] ) //A
    {  
        h = collision_point(rhythm_left+((rhythm_width/lanes)*1.5), judgement.y, obj_rhy_base, false, true);
        if( h != noone) //Check if there is a peice in the judgement line
            { with(h) { instance_destroy(); } }
    }
    if( global.in[? "d_3_p"] ) //B
    {  
        h = collision_point(rhythm_left+((rhythm_width/lanes)*2.5), judgement.y, obj_rhy_base, false, true);
        if( h != noone) //Check if there is a peice in the judgement line
            { with(h) { instance_destroy(); } }
    }
    if( global.in[? "d_4_p"] ) //Y
    {  
        h = collision_point(rhythm_left+((rhythm_width/lanes)*3.5), judgement.y, obj_rhy_base, false, true);
        if( h != noone) //Check if there is a peice in the judgement line
            { with(h) { instance_destroy(); } }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.master.ui)
{
    draw_set_color(c_gray);
    
    draw_set_alpha(1);
    for(i = rhythm_left; i &lt;= rhythm_left+rhythm_width; i += rhythm_width/lanes)
        { draw_line(i, rhythm_top, i, rhythm_top+rhythm_height); } 
    
    draw_set_color(c_black);
    draw_line(rhythm_left, rhythm_top, rhythm_left+rhythm_width, rhythm_top);
    draw_line(rhythm_left, rhythm_top+rhythm_height, rhythm_left+rhythm_width, rhythm_top+rhythm_height);
}        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.master.ui)
{
    alpha = 0.7;
    
    height = 20;
    width = 500; 
    
    //Health bar
    draw_set_alpha(alpha);
    draw_set_colour(c_black);
    draw_rectangle( (view_wview[0]/2)-(width/2), 0, (view_wview[0]/2)+(width/2), height, false );
    draw_set_alpha(1);
    draw_set_color(global.master.my_blue);
    draw_rectangle( (view_wview[0]/2)-(width/2), 0, (view_wview[0]/2)-(width/2)+(myHealth/maxHealth*width), height, false );
    draw_set_colour(c_black);
    draw_rectangle( (view_wview[0]/2)-(width/2), 0, (view_wview[0]/2)+(width/2), height, true );
    
    time = global.master.time;
    timeLimit = global.master.timeLimit;
    //Time
    draw_set_alpha(alpha);
    draw_set_colour(c_black);
    draw_rectangle( (view_wview[0]/2)-(width/2), height, (view_wview[0]/2)+(width/2), height*2, false );
    
    if( global.master.turn == 'p' ) { draw_set_color(global.master.my_green); } 
    else if( global.master.turn == 'e') { draw_set_color(global.master.my_red); }
    else if( global.master.previousTurn != 'n/a' )
    {
        if( global.master.previousTurn == 'p' ) { draw_set_color(global.master.my_green); } 
        else if( global.master.previousTurn == 'e') { draw_set_color(global.master.my_red); }
    }
    
    draw_set_alpha(1);
    draw_rectangle( (view_wview[0]/2)-(width/2), height, (view_wview[0]/2)-(width/2)+(time/timeLimit*width), height*2, false );
    
    draw_set_alpha(alpha);
    draw_set_colour(c_black);
    draw_rectangle( (view_wview[0]/2)-(width/2), height, (view_wview[0]/2)+(width/2), height*2, true );
    
    
    //Turn
    draw_set_alpha(alpha);
    draw_set_color(c_black);
    draw_rectangle(view_wview[0]/2+width/2, 0, view_wview[0]/2+width/2+height, height*2, false);
    draw_set_alpha(1);
    if(global.master.turn == 'p')
    {
        draw_set_color(global.master.my_green);
        draw_rectangle(view_wview[0]/2+width/2, 0, view_wview[0]/2+width/2+height, height, false);
    }
    else if(global.master.turn == 'e')
    {
        draw_set_color(global.master.my_red);
        draw_rectangle(view_wview[0]/2+width/2, height, view_wview[0]/2+width/2+height, height*2, false);
    }
    else if(global.master.previousTurn != 'n/a')
    {
        if(global.master.previousTurn == 'p')
        {
            draw_set_color(global.master.my_green);
            draw_rectangle(view_wview[0]/2+width/2, 0, view_wview[0]/2+width/2+height, height, false);
        }
        else if(global.master.previousTurn == 'e')
        {
            draw_set_color(global.master.my_red);
            draw_rectangle(view_wview[0]/2+width/2, height, view_wview[0]/2+width/2+height, height*2, false);
        }
    }
    draw_set_alpha(alpha);
    draw_set_color(c_black);
    draw_rectangle(view_wview[0]/2+width/2, 0, view_wview[0]/2+width/2+height, height*2, true);
    draw_line(view_wview[0]/2+width/2, height, view_wview[0]/2+width/2+height, height);
    
    //Combo options
    options = 0;
    size = 60
    
    for(i = 0; i &lt; array_length_2d(st, state); i++)
    {
        viable = true;
        for(j = 0; j &lt; array_length_1d(r); j++)
        {
            if(st[state, i] == r[j])
                { viable = false; }
        }
        
        if(viable and global.master.turn == 'p') 
        {
            if(i = 0) { comboItem("L", 0, size*(options+1), size); }
            else if(i = 1) { comboItem("R", 0, size*(options+1), size); } 
            
            options++;
        }
    }
    
    
    
    
    
    
    draw_set_alpha(1);
    //TEST RHYTHM 
    //RECTANGLE
    draw_set_color(c_black);
    
    draw_set_alpha(0.2);
    draw_rectangle(rhythm_left, rhythm_top, rhythm_left+rhythm_width, rhythm_top+rhythm_height, false);
    
    
    //TEXT
    draw_set_alpha(1);
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    
    rhy_sym[0] = "X";
    rhy_sym[1] = "A";
    rhy_sym[2] = "B";
    rhy_sym[3] = "Y";
    rhy_col[0] = global.master.my_blue;
    rhy_col[1] = global.master.my_green;
    rhy_col[2] = global.master.my_red;
    rhy_col[3] = global.master.my_orange;
    for(i = 0; i &lt; lanes; i++)
    { 
        draw_text_shadow(rhythm_left+(rhythm_width/lanes/2)+(rhythm_width/lanes*i), rhythm_top-5, 
            rhy_sym[i], fnt_gp_sym, 2, c_black, rhy_col[i]); 
    } 
    
    
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    //END TEST RHYTHM
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.master.fow and surface_exists( fov_surf ) ) 
{    
    draw_set_blend_mode(bm_subtract); 
    draw_surface(fov_surf, 0, 0); 
    draw_set_blend_mode(bm_normal);
    
}

if(global.master.turn == 'p') 
    { draw_sprite_ext( spr_p, 0, x, y, 1, 1, rot, c_white, 1); }
else if (global.master.turn == 'e' or global.master.turn == 'pause')
    { draw_sprite_ext( spr_p, 0, x, y, 1, 1, rot, global.darkened, 1); }
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
