<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_p_u</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_overlay(true);
debug_ui = false;

global.player = id;

rot = 'r';

maxHealth = 100;
myHealth = maxHealth;

atk = 5;
def = 5;



dPad = array(0, 0, 0, 0); //Frames held for DPad Up, right, down, and left
MOVE_REPEAT_DELAY = 0.25;



//Language
// 0 == a
// 1 == x

state = 0;

//First number is the current state
//This column is for "a" buttons
    //This column is for "x" buttons
st[0, 0] = 1;
    st[0, 1] = 6;
st[1, 0] = 2;
    st[1, 1] = 6;
st[2, 0] = 3;
    st[2, 1] = 4;
st[3, 0] = 0;
    st[3, 1] = 0;
st[4, 0] = 7;
    st[4, 1] = 5;
st[5, 0] = 0;
    st[5, 1] = 0;
st[6, 0] = 6;
    st[6, 1] = 6;
st[7, 0] = 6;
    st[7 , 1] = 8 
st[8, 0] = 6;
    st[8, 1] = 9;
st[9, 0] = 10;
    st[9, 1] = 6;
st[10, 0] = 6;
    st[10, 1] = 11;
st[11, 0] = 0;
    st[11, 1] = 0;
    
//Reject states
r[0] = 6; 



/*
//Particle system
mySys = part_system_create();
part_system_position(mySys, x, y);
part_system_depth(mySys, -20);

//Particles
myPart = part_type_create();
part_type_shape(myPart, pt_shape_disk);
part_type_size(myPart, 0.15, 0.3, -0.02, 0);
part_type_color1(myPart, c_red);
part_type_life(myPart, room_speed*1.0, room_speed*1.5);
part_type_direction(myPart, -10, 10, 0, 0);
part_type_speed(myPart, 3, 12, -0.5, 0);


//Particle Emitters
emit = part_emitter_create(mySys);
//part_emitter_burst(mySys, emit, myPart, 25);
*/





turnStart = current_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(time == timeLimit)
{
    dodged = false;
    turnStart = current_time;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
previousTargetOf = targetOf;
targetOf = 0;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>oldX = x;
oldY = y;

if(gamepad_button_check_pressed(global.gp_slot, gp_shoulderl))
    { debug_ui = !debug_ui; }


if(global.master.turn == 'p')
{
    if(global.gp_slot != -1)
    {
        //Look around
        stickDir = gp_direction(global.gp_slot, "r");
        stickDist = point_distance(0, 0, gamepad_axis_value(global.gp_slot, gp_axisrh), gamepad_axis_value(global.gp_slot, gp_axisrv) );
        if( stickDist &gt; 0 ) 
        {
            if( stickDir &gt;= 315 or stickDir &lt;= 45 )
                { rot = 'r'; }
            else if( stickDir &gt; 45 and stickDir &lt; 135 )
                { rot = 'u'; }
            else if( stickDir &gt;= 135 and stickDir &lt;= 225 )
                { rot = 'l'; }
            else if( stickDir &gt; 225 and stickDir &lt; 315 )
                { rot = 'd'; }        
        }
               
        //Move around
        if(gamepad_button_check_pressed(global.gp_slot, gp_padu)) //dpad_up first press
            { y-=32; }
        if(gamepad_button_check(global.gp_slot, gp_padu)) //dpad_up hold
            {  dPad[0] += delta_time/1000000; } //Adds how many seconds the button has been held
        else { dPad[0] = 0; } 
        
        if(gamepad_button_check_pressed(global.gp_slot, gp_padd)) //dpad_down first press
            { y+=32; }
        if(gamepad_button_check(global.gp_slot, gp_padd)) //dpad_down hold
            {  dPad[2] += delta_time/1000000; } //Adds how many seconds the button has been held 
        else { dPad[2] = 0; } 
        
        if(gamepad_button_check_pressed(global.gp_slot, gp_padl)) //dpad_left first press
            { x-=32; }
        if(gamepad_button_check(global.gp_slot, gp_padl)) //dpad_left hold
            {  dPad[3] += delta_time/1000000; } //Adds how many seconds the button has been held 
        else { dPad[3] = 0; } 
        
        if(gamepad_button_check_pressed(global.gp_slot, gp_padr)) //dpad_right first press
            { x+=32; }
        if(gamepad_button_check(global.gp_slot, gp_padr)) //dpad_right hold
            {  dPad[1] += delta_time/1000000; } //Adds how many seconds the button has been held 
        else { dPad[1] = 0; } 
        
        
        //Every half second, try to move again
        if( dPad[0]%1 &gt;= MOVE_REPEAT_DELAY ) 
        { 
            dPad[0] = 0;
            y-=32;
        }
        if( dPad[1]%1 &gt;= MOVE_REPEAT_DELAY ) 
        { 
            dPad[1] = 0;
            x+=32;
        }
        if( dPad[2]%1 &gt;= MOVE_REPEAT_DELAY ) 
        { 
            dPad[2] = 0;
            y+=32;
        }
        if( dPad[3]%1 &gt;= MOVE_REPEAT_DELAY ) 
        { 
            dPad[3] = 0;
            x-=32;
        }
        
        
        if( !checkMove(id, x, y) ) //If they cannot move there, 
        {
            if( checkMove(id, oldX, y) ) //try moving just the y
                { x = oldX; } //If successful, keep it  
            else if( checkMove(id, x, oldY) )//If that doesn't work, try just moving the x 
                { y = oldY; } //If it works, then keep it
            else //If that doesn't work, stay in place
            { 
                x = oldX;
                y = oldY;
            }
            
        }
    }
}









/*
if(global.master.turn == 'p') //Player turn
{
    time -= delta_time/10000;
    
    if(time &lt;= 0) //Time has expired
    {   
        dodgeID[i] = false;
        dodgePoints = true;
        
        for(i = 0; i &lt; array_length_1d(targetOf); i++)
        {
            dodgeID[i] = instance_find(obj_enemy,i);
            dodgePoints[i] = irandom_range(timeLimit/2, timeLimit);
        }
        
        global.master.turn = 'e'; 
        time = 0;
        eq = -1;
        state = 0;
        dodgeCount = array_length_1d(targetOf);
        turnStart = current_time;
    }
}
else if(global.master.turn == 'e') //Enemy turn
{
    //for(i = 0; i &lt; array_length_1d(dodgePoints); i++) { show_debug_message(dodgePoints[i]); }
    //show_debug_message("")

    if(array_length_1d(previousTargetOf) != array_length_1d(targetOf) or eq == -1) //I NEED TO ALSO CHECK IF THE NUMBER THAT IS TARGETING IT HAS CHANGED
        { eq = irandom_range(0.5*array_length_1d(targetOf), array_length_1d(targetOf)); }      
            
    time += getEnemyTimeChange(q, current_time - turnStart, timeLimit, time)
    
    if(time &gt;= timeLimit)
    {
        global.master.turn = 'p';
        time = timeLimit;

        for(i = 0; i &lt; array_length_1d(dodgePoints); i++)
        {
            if(dodgePoints[i] != true)
            {
                global.camera.rock = true; 
                attack(enemyAtkDmg(object_get_name(dodgeID[i].object_index), eq), dodgeID[i].atk, def, id);
            }
        }   
    }
}
else if(global.master.turn == 'w') //Paused
{
    
}

if(myHealth &lt;= 0) { myHealth = 0; } 
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.7);

height = 20;
width = 500; 

//Health bar
draw_set_colour(c_black);
draw_rectangle( (view_wview[0]/2)-(width/2), 0, (view_wview[0]/2)+(width/2), height, false );
draw_set_color(c_blue);
draw_rectangle( (view_wview[0]/2)-(width/2), 0, (view_wview[0]/2)-(width/2)+(myHealth/maxHealth*width), height, false );
draw_set_colour(c_black);
draw_rectangle( (view_wview[0]/2)-(width/2), 0, (view_wview[0]/2)+(width/2), height, true );

time = global.master.time;
timeLimit = global.master.timeLimit;
//Time
draw_set_colour(c_black);
draw_rectangle( (view_wview[0]/2)-(width/2), height, (view_wview[0]/2)+(width/2), height*2, false );

if(global.master.turn == 'e')
{  
    d = true;

    draw_set_color(c_red);    
    
    /*
    for(i = 0; i &lt; array_length_1d(dodgePoints); i++)
    { 
        //Draw the lines  
        if(dodgePoints[i] == 1) { t = -1; } //If it's already been dodged, move it out of the way
        else { t = dodgePoints[i]*timeLimit/width; } 
        draw_line_width((view_wview[0]-width)/2+t, height, (view_wview[0]-width)/2+t, height*2, 2);     
        
        //Have they dodged everything? 
        if(dodgePoints[i] != true) { d = false; }
    }
    */
    
    //show_debug_message(d);
    if(d) { draw_set_color(c_green); }
    else if (dodgeCount &gt; 0) { draw_set_color(c_yellow); } 
    else { draw_set_color(c_red); } 

}
else { draw_set_color(c_green); }


draw_rectangle( (view_wview[0]/2)-(width/2), height, (view_wview[0]/2)-(width/2)+(time/timeLimit*width), height*2, false );
draw_set_colour(c_black);
draw_rectangle( (view_wview[0]/2)-(width/2), height, (view_wview[0]/2)+(width/2), height*2, true );


//Turn
draw_set_color(c_black);
draw_rectangle(view_wview[0]/2+width/2, 0, view_wview[0]/2+width/2+height, height*2, false);
if(global.master.turn == 'p')
{
    draw_set_color(c_green);
    draw_rectangle(view_wview[0]/2+width/2, 0, view_wview[0]/2+width/2+height, height, false);
}
else if(global.master.turn == 'e')
{
    draw_set_color(c_red);
    draw_rectangle(view_wview[0]/2+width/2, height, view_wview[0]/2+width/2+height, height*2, false);
}
draw_set_color(c_black);
draw_rectangle(view_wview[0]/2+width/2, 0, view_wview[0]/2+width/2+height, height*2, true);
draw_line(view_wview[0]/2+width/2, height, view_wview[0]/2+width/2+height, height);
/*
//Combo options
options = 0;
size = 60

for(i = 0; i &lt; array_length_2d(st, state); i++)
{
    viable = true;
    for(j = 0; j &lt; array_length_1d(r); j++)
    {
        if(st[state, i] == r[j])
        {
            viable = false;   
        }
    }
    
    if(viable and global.master.turn == 'p') 
    {
        if(i = 0) { comboItem("a", 0, size*(options+1), size); }
        else if(i = 1) { comboItem("x", 0, size*(options+1), size); } 
        
        options++;
    }
}
*/
draw_set_alpha(1);







if(debug_ui)
{
    text="";
    if(global.gp_slot != -1)
    {   
        text+="DPAD_UP: "+string(gamepad_button_check(global.gp_slot, gp_padu))+"#";
        text+="DPAD_LEFT: "+string(gamepad_button_check(global.gp_slot, gp_padl))+"#";
        text+="DPAD_RIGHT: "+string(gamepad_button_check(global.gp_slot, gp_padr))+"#";
        text+="DPAD_DOWN: "+string(gamepad_button_check(global.gp_slot, gp_padd))+"#";
        text+="#";
        text+="BTN_A: "+string(gamepad_button_check(global.gp_slot, gp_face1))+"#";
        text+="BTN_B: "+string(gamepad_button_check(global.gp_slot, gp_face2))+"#";
        text+="BTN_X: "+string(gamepad_button_check(global.gp_slot, gp_face3))+"#";
        text+="BTN_Y: "+string(gamepad_button_check(global.gp_slot, gp_face4))+"#";
        text+="#";
        text+="LSTK_X: "+string(gamepad_axis_value(global.gp_slot, gp_axislh))+"#";
        text+="LSTK_Y: "+string(gamepad_axis_value(global.gp_slot, gp_axislv))+"#";
        text+="LSTK_DIR: "+string( gp_direction(global.gp_slot, "l") )+"#";
        text+="#";
        text+="RSTK_X: "+string(gamepad_axis_value(global.gp_slot, gp_axisrh))+"#";
        text+="RSTK_Y: "+string(gamepad_axis_value(global.gp_slot, gp_axisrv))+"#";
        text+="RSTK_DIR: "+string( gp_direction(global.gp_slot, "r") )+"#";
        text+="#";
        text+="BTN_LB: "+string(gamepad_button_check(global.gp_slot, gp_shoulderl))+"#";
        text+="BTN_RB: "+string(gamepad_button_check(global.gp_slot, gp_shoulderr))+"#";
        text+="#";
        text+="HELD_UP: "+string(dPad[0])+"/"+string(MOVE_REPEAT_DELAY)+"#";
        text+="HELD_RIGHT: "+string(dPad[1])+"/"+string(MOVE_REPEAT_DELAY)+"#";
        text+="HELD_DOWN: "+string(dPad[2])+"/"+string(MOVE_REPEAT_DELAY)+"#";
        text+="HELD_LEFT: "+string(dPad[3])+"/"+string(MOVE_REPEAT_DELAY)+"#";
    }
    else { text = "NO GAMEPAD FOUND"; }
    
    draw_set_color(c_white);
    draw_text(10, 10, text);
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    
    draw_text( view_wview[0]/2, height*0.5, string(myHealth)+"/"+string(maxHealth) );
    draw_text( view_wview[0]/2, height*1.5, string(time)+"/"+string(timeLimit) );
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(global.master.turn == 'p') 
    { draw_sprite(asset_get_index("spr_p_" + rot), 0, x, y); }
else if (global.master.turn == 'e')
    { draw_sprite_ext(asset_get_index("spr_p_" + rot), 0, x, y, 1, 1, 0, global.darkened, 1); }
*/
//draw_self();

draw_sprite(asset_get_index("spr_p_" + rot), 0, x, y); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(global.turn == 'p')
{
    key = "";
    attacking = false;
    
    //Process input
    switch (keyboard_key)
    {
        //Move
        case vk_up:
            if (tryMove(id, x, y-32))
                { alarm[1] = 1; } 
            break;
        case vk_down:
            if (tryMove(id, x, y+32))
                { alarm[1] = 1; } 
            break;
        case vk_right:
            if (tryMove(id, x+32, y))
                { alarm[1] = 1; } 
            break;
        case vk_left:
            if (tryMove(id, x-32, y))
                { alarm[1] = 1; } 
            break;
         
        //Rotate
        case ord("I"):
            rot = "u";
            break;    
        case ord("L"):
            rot = "r";
            break;
        case ord("K"):
            rot = "d";
            break;    
        case ord("J"):
            rot = "l";
            break;    
                
        //Attack    
        case ord("A"): 
            attacking = true;
            key = 0; 
            break;
        case ord("X"):
            attacking = true;
            key = 1;
            break;
        
        //Nonsense
        default:
            key = "$";
            break;
    }
    
    //State machine
    if(attacking)
    { 
        state = st[state, key]; 

        switch (state)
        {
            case 3: 
                instance_create(x, y, hit_str);
                target = checkHit(id, "basic1", obj_enemy);
                attack(12.5, atk, target.def, target); 
                state = 0;
                break;
            case 5:
                target = checkHit(id, "basic1", obj_enemy);
                attack(30, atk, target.def, target);
                state = 0;
                break;
            case 6: 
                time -= 50;
                state = 0;
                break;
            case 11:
                target = checkHit(id, "basic1", obj_enemy);
                attack(80, atk, target.def, target);
                state = 0;
            default: 
                break;
        }   
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
