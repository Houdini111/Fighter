<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ui = true;
debug_ui = false;

turn = 'p';
previousTurn = 'n/a';

global.tileSize = 32;

timeLimit = 5; //5 seconds
time = timeLimit;


global.gridSize = 32;

global.grid = mp_grid_create(0, 0, room_width/global.gridSize, room_height/global.gridSize, global.gridSize, global.gridSize);
mp_grid_add_instances(global.grid, obj_wall, false);


rhy_speed = 1.5;
my_blue = make_color_hsv(154, 191, 210); //Blue
my_green = make_color_hsv(86, 191, 210); //Green   
my_red = make_color_hsv(2, 191, 210); //Red        
my_orange = make_color_hsv(20, 191, 210); //Orange 

global.rhy = ds_list_create();


global.wall_surf = surface_create(room_width, room_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.gp_slot != -1 and gamepad_button_check_pressed(global.gp_slot, gp_start) )
{ 
    if(turn == 'pause') { turn = previousTurn; }
    else
    { 
        previousTurn = turn;
        turn = 'pause'; 
    }
}

if(turn == 'p')
{
    time -= delta_time/1000000; //Convert to full seconds and subtract
    
    if(time &lt;= 0)
    {
        time = 0;
        turn = 'e';
    }
}
else if (turn == 'e')
{
    time += delta_time/1000000;
    
    if(time &gt;= timeLimit)
    {
        time = timeLimit;
        turn = 'p';
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( gamepad_button_check_pressed(global.gp_slot, gp_select)
    or keyboard_check_pressed(vk_f3) )
{ 
    debug_ui = !debug_ui; 
    show_debug_overlay(debug_ui);
}
if( keyboard_check_pressed(vk_f4) ) { ui = !ui; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.4);
draw_surface(global.wall_surf, 0, 0);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(turn == 'pause')
{
    draw_set_alpha(0.4);
    draw_set_color(c_black);
    draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
    draw_set_alpha(1);
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_shadow(view_wport[0]/2, view_hport[0]/2, "PAUSED", fnt_title, 5, c_black, c_white);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}

if(debug_ui)
{   
    draw_set_font(fnt_debug);
    //pathfinding grid 
    //WARNING: VERY GPU INTENSIVE
    /*
    draw_set_alpha(0.4);
    mp_grid_draw(global.grid);
    draw_set_alpha(1);
    */
    
    text="";
    if(global.gp_slot != -1)
    {   
        text+="DPAD_UP: "+string(gamepad_button_check(global.gp_slot, gp_padu))+"#";
        text+="DPAD_LEFT: "+string(gamepad_button_check(global.gp_slot, gp_padl))+"#";
        text+="DPAD_RIGHT: "+string(gamepad_button_check(global.gp_slot, gp_padr))+"#";
        text+="DPAD_DOWN: "+string(gamepad_button_check(global.gp_slot, gp_padd))+"#";
        text+="#";
        text+="BTN_A: "+string(gamepad_button_check(global.gp_slot, gp_face1))+"#";
        text+="BTN_B: "+string(gamepad_button_check(global.gp_slot, gp_face2))+"#";
        text+="BTN_X: "+string(gamepad_button_check(global.gp_slot, gp_face3))+"#";
        text+="BTN_Y: "+string(gamepad_button_check(global.gp_slot, gp_face4))+"#";
        text+="#";
        text+="LSTK_X: "+string(gamepad_axis_value(global.gp_slot, gp_axislh))+"#";
        text+="LSTK_Y: "+string(gamepad_axis_value(global.gp_slot, gp_axislv))+"#";
        text+="LSTK_DIR: "+string( gp_direction(global.gp_slot, "l") )+"#";
        text+="#";
        text+="RSTK_X: "+string(gamepad_axis_value(global.gp_slot, gp_axisrh))+"#";
        text+="RSTK_Y: "+string(gamepad_axis_value(global.gp_slot, gp_axisrv))+"#";
        text+="RSTK_DIR: "+string( gp_direction(global.gp_slot, "r") )+"#";
        text+="#";
        text+="L_STK: "+string(gamepad_button_check(global.gp_slot, gp_stickl))+"#";
        text+="R_STK: "+string(gamepad_button_check(global.gp_slot, gp_stickr))+"#";
        text+="#";
        text+="BTN_LB: "+string(gamepad_button_check(global.gp_slot, gp_shoulderl))+"#";
        text+="BTN_RB: "+string(gamepad_button_check(global.gp_slot, gp_shoulderr))+"#";
        text+="#";
        text+="L_TRIGGR: "+string(gamepad_button_check(global.gp_slot, gp_shoulderlb))+"#";
        text+="R_TRIGGER: "+string(gamepad_button_check(global.gp_slot, gp_shoulderrb))+"#";
        text+="#";
        text+="START: "+string(gamepad_button_check(global.gp_slot, gp_start))+"#";
        text+="SELECT: "+string(gamepad_button_check(global.gp_slot, gp_select))+"#";
        text+="#";
        text+="HELD_UP: "+string(global.player.dPad[0])+"/"+string(global.player.MOVE_REPEAT_DELAY)+"#";
        text+="HELD_RIGHT: "+string(global.player.dPad[1])+"/"+string(global.player.MOVE_REPEAT_DELAY)+"#";
        text+="HELD_DOWN: "+string(global.player.dPad[2])+"/"+string(global.player.MOVE_REPEAT_DELAY)+"#";
        text+="HELD_LEFT: "+string(global.player.dPad[3])+"/"+string(global.player.MOVE_REPEAT_DELAY)+"#";
    }
    else { text = "NO GAMEPAD FOUND"; }
    
    draw_set_color(c_white);
    draw_text_shadow(10, 25, text, fnt_debug, 2, c_black, c_white);
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    
    draw_text( view_wview[0]/2, global.player.height*0.5, string(global.player.myHealth)+"/"+string(global.player.maxHealth) );
    draw_text( view_wview[0]/2, global.player.height*1.5, string(time)+"/"+string(timeLimit) );
    draw_text( (view_wview[0]+global.player.width+global.player.height)/2, global.player.height, turn );
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    draw_set_color(c_white);
    draw_rectangle(global.player.rhythm_left, global.player.rhythm_top+global.player.rhythm_height, global.player.rhythm_left+global.player.rhythm_width, view_hport[0], false);
    draw_set_color(c_purple);
    draw_line(global.player.rhythm_left, global.player.rhythm_top+global.player.rhythm_height, global.player.rhythm_left, view_hport[0]);
    draw_line(global.player.rhythm_left+global.player.rhythm_width, global.player.rhythm_top+global.player.rhythm_height, global.player.rhythm_left+global.player.rhythm_width, view_hport[0]);
    draw_line(global.player.rhythm_left+(global.player.rhythm_width*(time%1)), global.player.rhythm_top+global.player.rhythm_height, global.player.rhythm_left+(global.player.rhythm_width*(time%1)), view_hport[0]);
    
    draw_set_halign(fa_right);
    text = string(global.player.state);
    draw_text_shadow(view_wport[0]-10, 10, text, fnt_debug, 2, c_black, c_white);
    draw_set_halign(fa_left);
}

/*
text=""
for(i = 0; i &lt; ds_list_size(global.rhy); i++)
    { text += string( object_get_name(ds_list_find_value(global.rhy, i).object_index ) ) + ", "; }
draw_text_shadow(10, 700, text, fnt_debug, 2, c_black, c_white);
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
