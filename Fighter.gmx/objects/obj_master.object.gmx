<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ui = true;
debug_ui = false;
fow = true;
fow_pen = true;

turn = 'p';
previousTurn = 'n/a';

global.tileSize = 32;

timeLimit = 5; //5 seconds
time = timeLimit;


global.gridSize = 32;

global.grid = mp_grid_create(0, 0, room_width/global.gridSize, room_height/global.gridSize, global.gridSize, global.gridSize);


rhy_speed = 1.5;
my_blue = make_color_hsv(154, 191, 210); //Blue
my_green = make_color_hsv(86, 191, 210); //Green   
my_red = make_color_hsv(2, 191, 210); //Red        
my_orange = make_color_hsv(20, 191, 210); //Orange 

global.rhy = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>in_update();

if(keyboard_check_pressed(vk_f6)) { fow = !fow; }

if( global.in[? "start_p"] )
{ 
    if(turn == 'pause') { turn = previousTurn; }
    else
    { 
        previousTurn = turn;
        turn = 'pause'; 
    }
}

if(turn == 'p')
{
    time -= delta_time/1000000; //Convert to full seconds and subtract
    
    if(time &lt;= 0)
    {
        time = 0;
        turn = 'e';
    }
}
else if (turn == 'e')
{
    time += delta_time/1000000;
    
    if(time &gt;= timeLimit)
    {
        time = timeLimit;
        turn = 'p';
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.in[? "select_p"] )
{ 
    debug_ui = !debug_ui; 
    show_debug_overlay(debug_ui);
}
if( keyboard_check_pressed(vk_f4) ) { ui = !ui; }
if( keyboard_check_pressed(vk_f7) ) { fow_pen = !fow_pen; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(turn == 'pause')
{
    draw_set_alpha(0.4);
    draw_set_color(c_black);
    draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
    draw_set_alpha(1);
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_shadow(view_wport[0]/2, view_hport[0]/2, "PAUSED", fnt_title, 5, c_black, c_white);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}

if(debug_ui)
{   
    draw_set_font(fnt_debug);
    //pathfinding grid 
    //WARNING: VERY GPU INTENSIVE
    //Doesn't even move with the camera properly
    /*
    draw_set_alpha(0.4);
    mp_grid_draw(global.grid);
    draw_set_alpha(1);
    */
    
    text="";
    if(global.gp_slot != -1) //CONTROLLER
    {   
        text+="SLOT: "+string(global.gp_slot)+"#";
        text+="DESC: "+string(gamepad_get_description(global.gp_slot))+"#";
        text+="#";
    }
    else //KEYBOARD
    { 
        text+="NO GAMEPAD FOUND"+"#";
        text+="USING KEYBOARD"+"#"; 
        text+="#";
    }
    
    text+="MOVE_UP: "+string(global.in[? "m_up"])+" ["+string(global.in[? "m_up_p"])+"]#";
    text+="MOVE_LEFT: "+string(global.in[? "m_left"])+" ["+string(global.in[? "m_left_p"])+"]#";
    text+="MOVE_RIGHT: "+string(global.in[? "m_up"])+" ["+string(global.in[? "m_right_p"])+"]#";
    text+="MOVE_DOWN: "+string(global.in[? "m_down"])+" ["+string(global.in[? "m_down_p"])+"]#";
    text+="#";
    text+="HELD_UP: "+string(global.in[? "m_up_h"])+"/"+string(global.player.MOVE_REPEAT_DELAY)+"#";
    text+="HELD_RIGHT: "+string(global.in[? "m_right_h"])+"/"+string(global.player.MOVE_REPEAT_DELAY)+"#";
    text+="HELD_DOWN: "+string(global.in[? "m_down_h"])+"/"+string(global.player.MOVE_REPEAT_DELAY)+"#";
    text+="HELD_LEFT: "+string(global.in[? "m_left_h"])+"/"+string(global.player.MOVE_REPEAT_DELAY)+"#";
    text+="#";
    text+="DODGE_1: "+string(global.in[? "d_1"])+" ["+string(global.in[? "d_1_p"])+"]#";
    text+="DODGE_2: "+string(global.in[? "d_2"])+" ["+string(global.in[? "d_2_p"])+"]#";
    text+="DODGE_3: "+string(global.in[? "d_3"])+" ["+string(global.in[? "d_3_p"])+"]#";
    text+="DODGE_4: "+string(global.in[? "d_4"])+" ["+string(global.in[? "d_4_p"])+"]#";
    text+="#";
    text+="LSTK_X: "+string(global.in[? "l_x"])+"#";
    text+="LSTK_Y: "+string(global.in[? "l_y"])+"#";
    text+="LSTK_DIR: "+string(global.in[? "l_dir"])+"#";
    text+="LSTK: "+string(global.in[? "l_press"])+"#";
    text+="#";
    text+="RSTK_X: "+string(global.in[? "r_x"])+"#";
    text+="RSTK_Y: "+string(global.in[? "r_y"])+"#";
    text+="RSTK_DIR: "+string(global.in[? "r_dir"])+"#";
    text+="RSTK: "+string(global.in[? "r_press"])+"#";
    text+="#";
    text+="ACT_1: "+string(global.in[? "a_1"])+" ["+string(global.in[? "a_1_p"])+"]#";
    text+="ACT_2: "+string(global.in[? "a_2"])+" ["+string(global.in[? "a_2_p"])+"]#";
    text+="ACT_3: "+string(global.in[? "a_3"])+" ["+string(global.in[? "a_3_p"])+"]#";
    text+="ACT_4: "+string(global.in[? "a_4"])+" ["+string(global.in[? "a_4_p"])+"]#";
    text+="#";
    text+="START: "+string(global.in[? "start"])+"#";
    text+="SELECT: "+string(global.in[? "select"])+"#";
        
    
    
    draw_set_color(c_white);
    draw_text_shadow(10, 25, text, fnt_debug, 2, c_black, c_white);
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    
    draw_text( view_wview[0]/2, global.player.height*0.5, string(global.player.myHealth)+"/"+string(global.player.maxHealth) );
    draw_text( view_wview[0]/2, global.player.height*1.5, string(time)+"/"+string(timeLimit) );
    draw_text( (view_wview[0]+global.player.width+global.player.height)/2, global.player.height, turn );
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    draw_set_color(c_white);
    draw_rectangle(global.player.rhythm_left, global.player.rhythm_top+global.player.rhythm_height, global.player.rhythm_left+global.player.rhythm_width, view_hport[0], false);
    draw_set_color(c_purple);
    draw_line(global.player.rhythm_left, global.player.rhythm_top+global.player.rhythm_height, global.player.rhythm_left, view_hport[0]);
    draw_line(global.player.rhythm_left+global.player.rhythm_width, global.player.rhythm_top+global.player.rhythm_height, global.player.rhythm_left+global.player.rhythm_width, view_hport[0]);
    draw_line(global.player.rhythm_left+(global.player.rhythm_width*(time%1)), global.player.rhythm_top+global.player.rhythm_height, global.player.rhythm_left+(global.player.rhythm_width*(time%1)), view_hport[0]);
    
    draw_set_halign(fa_right);
    text = string(global.player.state);
    draw_text_shadow(view_wport[0]-10, 10, text, fnt_debug, 2, c_black, c_white);
    draw_set_halign(fa_left);
}

/*
text=""
for(i = 0; i &lt; ds_list_size(global.rhy); i++)
    { text += string( object_get_name(ds_list_find_value(global.rhy, i).object_index ) ) + ", "; }
draw_text_shadow(10, 700, text, fnt_debug, 2, c_black, c_white);
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
