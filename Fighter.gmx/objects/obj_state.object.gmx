<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    ui_width = 0.075*view_wport[0];
ui_height = 0.3*view_hport[0];
x = 0;
y = 0;
circle_radius = 15;

t_speed = 4;

state = 0; 
oldState = 0;
tree_depth = 0;

enabled = true;

//Language
// 0 == a1 (LB / E)
// 1 == a2 (RB / R)
// 2 == a3 (LT / Y)

//First number is the current state
//This column is for "a_1" buttons
    //This column is for "a_2" buttons
        //This column is for "a_3" buttons
        
    //--- means unused
    //! means part of a dead-end accept state (so don't use it)
    //@ means reject
    
st[0, 0] = 1;           //Physical branch
    st[0, 1] = 2;       //Magic branch
        st[0, 2] = 3;   //Item branch
st[1, 0] = 4;           //Light combo
    st[1, 1] = -1;      //@
        st[1, 2] = -1;  //@
st[2, 0] = 5;           //Magic light 
    st[2, 1] = 13;      //Magic medium
        st[2, 2] = -1;  //@
st[3, 0] = 6;           //Heal options
    st[3, 1] = -1;      //@
        st[3, 2] = -1;  //@
st[4, 0] = 7;           //Finish light physical combo 1
    st[4, 1] = -1;      //@
        st[4, 2] = -1;  //@
st[5, 0] = 8;           //Magic light combo 1
    st[5, 1] = -1;      //@
        st[5, 2] = -1;  //@
st[6, 0] = 9;           //Complete a light heal
    st[6, 1] = -1;      //@
        st[6, 2] = -1;  //@
st[7, 0] = -1;          //@
    st[7, 1] = 11;      //Continue the light physical combo
        st[7, 2] = -1;  //@
st[8, 0] = -1;          //@
    st[8, 1] = 10;      //Finish magic light combo
        st[8, 2] = -1;  //@
st[9, 0] = 0;           //!
    st[9, 1] = 0;       //!
        st[9, 2] = 0;   //!
st[10, 0] = 0;          //!
    st[10, 1] = 0;      //!
        st[10, 2] = 0;  //!
st[11, 0] = 12;         //Finish light attack combo 2 
    st[11, 1] = -1;     //@
        st[11, 2] = -1; //@
st[12, 0] = 0;          //!
    st[12, 1] = 0;      //!
        st[12, 2] = 0;  //!
st[13, 0] = 14;         //Continue medium magic combo 1
    st[13, 1] = -1;     //!
        st[13, 2] = -1; //!
st[14, 0] = -1;         //!
    st[14, 1] = 15;     //Continue medium magic combo 1
        st[14, 2] = -1; //!
st[15, 0] = 16;         //Finish medium magic combo 1 
    st[15, 1] = -1;     //!
        st[15, 2] = -1; //!
st[16, 0] = 0;          //@
    st[16, 1] = 0;      //@
        st[16, 2] = 0;  //@

//Reject state
r = -1;

//Accept states
a[0] = 7;
a[1] = 9;
a[2] = 10;
a[3] = 12;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state_second_half();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state_second_half();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state_second_half();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.master.turn != 'p' ) 
{ 
    state = 0; 
    oldState = 0; 
    tree_depth = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( enabled )
{
    if( global.master.turn == 'e' ) { draw_set_alpha(0.7); }
    
    if( alarm[0] != -1 )
    {//show_debug_message("0");
        h_amt = ui_height/2*(t_speed-alarm[0])/t_speed;
        w_amt = ui_width*(t_speed-alarm[0])/t_speed;
        s_amt = circle_radius*(1-((t_speed-alarm[0])/t_speed));
        draw_state_circle( oldState, 'c', s_amt, 0 );
        draw_state_circle( oldState, 0, circle_radius, h_amt );
        if( st[oldState, 1] != -1 ) { draw_state_circle( oldState, 1, s_amt, w_amt ); } 
        if( st[oldState, 2] != -1 ) { draw_state_circle( oldState, 2, s_amt, h_amt ); }
    }
    else if( alarm[1] != -1 )
    {//show_debug_message("1");
        h_amt = ui_height/2*(t_speed-alarm[1])/t_speed;
        w_amt = ui_width*(t_speed-alarm[1])/t_speed;
        s_amt = circle_radius*(1-((t_speed-alarm[1])/t_speed));
        draw_state_circle( oldState, 'c', s_amt, 0 );
        if( st[oldState, 0] != -1 ) { draw_state_circle( oldState, 0, s_amt, h_amt ); }
        draw_state_circle( oldState, 1, circle_radius, w_amt ); 
        if( st[oldState, 2] != -1 ) { draw_state_circle( oldState, 2, s_amt, h_amt ); }
    }
    else if( alarm[2] != -1 )
    {//show_debug_message("2");
        h_amt = ui_height/2*(t_speed-alarm[2])/t_speed;
        w_amt = ui_width*(t_speed-alarm[2])/t_speed;
        s_amt = circle_radius*(1-((t_speed-alarm[2])/t_speed));
        draw_state_circle( oldState, 'c', s_amt, 0 );
        if( st[oldState, 0] != -1 ) { draw_state_circle( oldState, 0, s_amt, h_amt ); }
        if( st[oldState, 1] != -1 ) { draw_state_circle( oldState, 1, s_amt, w_amt ); }
    }
    else if( alarm[9] != -1 )
    {//show_debug_message("3");
        s_amt = circle_radius*(1-(alarm[9]/t_speed));
        draw_state_circle( state, 'c', circle_radius, 0 );
        if( st[state, 0] != -1 ) { draw_state_circle( state, 0, s_amt, 0 ); }
        if( st[state, 1] != -1 ) { draw_state_circle( state, 1, s_amt, 0 ); }
        if( st[state, 2] != -1 ) { draw_state_circle( state, 2, s_amt, 0 ); } 
    }
    else
    {//show_debug_message("4");
        //draw_state_triangles();
        draw_state_circle( state, 'c', circle_radius, 0 );
        if( st[state, 0] != -1 ) { draw_state_circle( state, 0, circle_radius, 0 ); }
        if( st[state, 1] != -1 ) { draw_state_circle( state, 1, circle_radius, 0 ); }
        if( st[state, 2] != -1 ) { draw_state_circle( state, 2, circle_radius, 0 ); } 
        draw_state_circle( tree_depth, 'c_t', circle_radius, 0);
    }
    
    show_debug_message(state);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
