<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ui_width = 0.075*view_wport[0];
ui_height = 0.3*view_hport[0];
x = 0;
y = 0;
circle_radius = 15;

t_speed = 10;



state = 0; 
//Language
// 0 == a1 (LB / E)
// 1 == a2 (RB / R)
// 2 == a3 (LT / Y)

//First number is the current state
//This column is for "a" buttons
    //This column is for "x" buttons
    
    //--- means unused
    //! means part of a dead-end accept state (so don't use it)
st[0, 0] = 1;
    st[0, 1] = 6;//REJECT
st[1, 0] = 2;
    st[1, 1] = 6;//REJECT
st[2, 0] = 3;    //ACCEPT
    st[2, 1] = 4;
st[3, 0] = 0;//!
    st[3, 1] = 0;//!
st[4, 0] = 7;
    st[4, 1] = 5;//ACCEPT
st[5, 0] = 0;//!
    st[5, 1] = 0;//!
st[6, 0] = 6;    //REJECT
    st[6, 1] = 6;//REJECT
st[7, 0] = 6;    //REJECT
    st[7 , 1] = 8 
st[8, 0] = 6;    //REJECT
    st[8, 1] = 9;//ACCEPT
st[9, 0] = 0;//!
    st[9, 1] = 0;//!
st[10, 0] = 6;//---
    st[10, 1] = 6;//---
st[11, 0] = 0;//---
    st[11, 1] = 0;//---
    
//Reject states
r[0] = 6; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[9] = t_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[9] = t_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[9] = t_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
//Combo options
options = 0;
size = 60

for(i = 0; i &lt; array_length_2d(st, state); i++)
{
    viable = true;
    for(j = 0; j &lt; array_length_1d(r); j++)
    {
        if(st[state, i] == r[j])
            { viable = false; }
    }
    
    if(viable and global.master.turn == 'p') 
    {
        if(i = 0) { comboItem("L", 0, size*(options+1), size); }
        else if(i = 1) { comboItem("R", 0, size*(options+1), size); } 
        
        options++;
    }
}
*/

draw_set_color(c_black);
/*
draw_circle(x+circle_radius, y+circle_radius, circle_radius, false); //Top
draw_circle(x+circle_radius, y+circle_radius+ui_height/2, circle_radius, false); //Center
draw_circle(x+circle_radius, y+circle_radius+ui_height, circle_radius, false); //Bottom
draw_circle(x+circle_radius+ui_width, y+circle_radius+ui_height/2, circle_radius, false); //Right
*/
if( alarm[0] != -1 )
{
    m_amt = ui_height/2*(t_speed-alarm[0])/t_speed;
    s_amt = circle_radius*(1-((t_speed-alarm[0])/t_speed));
    draw_circle(x+circle_radius, y+circle_radius+m_amt, circle_radius, false); //Top
    draw_circle(x+circle_radius, y+circle_radius+ui_height/2, s_amt, false); //Center
    draw_circle(x+circle_radius, y+circle_radius+ui_height-m_amt, s_amt, false); //Bottom
    draw_circle(x+circle_radius+ui_width-m_amt, y+circle_radius+ui_height/2, s_amt, false); //Right
}
else if( alarm[1] != -1 )
{
    m_amt = ui_height/2*(t_speed-alarm[1])/t_speed;
    s_amt = circle_radius*(1-((t_speed-alarm[1])/t_speed));
    draw_circle(x+circle_radius, y+circle_radius+m_amt, s_amt, false); //Top
    draw_circle(x+circle_radius, y+circle_radius+ui_height/2, s_amt, false); //Center
    draw_circle(x+circle_radius, y+circle_radius+ui_height-m_amt, s_amt, false); //Bottom
    draw_circle(x+circle_radius+ui_width-m_amt, y+circle_radius+ui_height/2, circle_radius, false); //Right
}
else if( alarm[2] != -1 )
{
    m_amt = ui_height/2*(t_speed-alarm[2])/t_speed;
    s_amt = circle_radius*(1-((t_speed-alarm[2])/t_speed));
    draw_circle(x+circle_radius, y+circle_radius+m_amt, s_amt, false); //Top
    draw_circle(x+circle_radius, y+circle_radius+ui_height/2, s_amt, false); //Center
    draw_circle(x+circle_radius, y+circle_radius+ui_height-m_amt, s_amt, false); //Bottom
    draw_circle(x+circle_radius+ui_width-m_amt, y+circle_radius+ui_height/2, s_amt, false); //Right
}
else if( alarm[9] != -1 )
{
    s_amt = circle_radius*(1-(alarm[9]/t_speed));
    draw_circle(x+circle_radius, y+circle_radius, s_amt, false); //Top
    draw_circle(x+circle_radius, y+circle_radius+ui_height/2, circle_radius, false); //Center
    draw_circle(x+circle_radius, y+circle_radius+ui_height, s_amt, false); //Bottom
    draw_circle(x+circle_radius+ui_width, y+circle_radius+ui_height/2, s_amt, false); //Right

}
else
{
    draw_circle(x+circle_radius, y+circle_radius, circle_radius, false); //Top
    draw_circle(x+circle_radius, y+circle_radius+ui_height/2, circle_radius, false); //Center
    draw_circle(x+circle_radius, y+circle_radius+ui_height, circle_radius, false); //Bottom
    draw_circle(x+circle_radius+ui_width, y+circle_radius+ui_height/2, circle_radius, false); //Right
}
show_debug_message( string(alarm[0]) + ": " + string(alarm[9]));
//draw_circle(x+circle_radius, y+circle_radius+(ui_height/2*t_speed/alarm[0]), circle_radius, false); //Top
//draw_circle(x+circle_radius, y+circle_radius+ui_height/2, circle_radius, false); //Center
//draw_circle(x+circle_radius, y+circle_radius+ui_height, circle_radius, false); //Bottom
//draw_circle(x+circle_radius+ui_width, y+circle_radius+ui_height/2, circle_radius, false); //Right

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
