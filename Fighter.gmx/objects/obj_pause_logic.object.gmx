<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview[0] = 0;
view_yview[0] = 0;
x = 0; 
y = 0;
goal_x = x;
goal_y = y;
place = "main";
selection = 0;

editing = false;

MAX_SPEED = view_wview[0]/room_speed*3; //view_wview[0]/room_speed will let it move a whole view in one second


views = ds_map_create();

views[? "main_x"] = 0;
views[? "main_y"] = 0;

views[? "options_x"] = view_wview[0];
views[? "options_y"] = 0;

views[? "keys_x"] = view_wview[0];
views[? "keys_y"] = view_hview[0];

views[? "buttons_x"] = view_wview[0];
views[? "buttons_y"] = -view_hview[0];


temp_keys = ds_map_create();
ds_map_destroy(temp_keys);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start responding to inputs after a duration
input = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(place == "main")
{
    if( global.in[? "a_4_p"] )
    {
        selection = 0;
        place = "options";
        goal_x = views[? "options_x"];
        goal_y = views[? "options_y"];
    }
}
else if (place == "options")
{
    if( global.in[? "a_3_p"] )
    {
        selection = 0;
        place = "main";
        goal_x = views[? "main_x"];
        goal_y = views[? "main_y"];
    }
}

if(x != goal_x or y != goal_y)
{
    if( x &gt; goal_x ) { x -= min( x-goal_x, MAX_SPEED); }
    else if ( x &lt; goal_x ) { x += min( goal_x-x, MAX_SPEED); }
    
    if( y &gt; goal_y ) { y -= min( y-goal_y, MAX_SPEED); }
    else if ( y &lt; goal_y ) { y += min( goal_y-y, MAX_SPEED); }
}


  
if( place == "options" ) 
{ 
    if( global.in[? "m_down_p"] ) { selection++; } 
    else if ( global.in[? "m_up_p"] ) { selection--; } 
    selection = clamp(selection, 0, 3); 
      
    if( selection == 0 ) //Window Size
    {
        if( global.in[? "m_right_p"] )  
        { 
            if( global.camera.window_zoom != "Fullscreen" )
            {
                if( global.camera.window_zoom &lt; global.camera.max_window_zoom )
                {
                    global.camera.window_zoom++; 
                    global.camera.window_zoom = clamp(global.camera.window_zoom, 1, global.camera.max_window_zoom);
                    global.camera.before_max = global.camera.window_zoom;
                    global.camera.alarm[3] = 1;
                }
                else if ( global.camera.window_zoom == global.camera.max_window_zoom ) 
                { 
                    window_set_fullscreen(true); 
                    global.camera.before_max = global.camera.window_zoom;
                    global.camera.window_zoom = "Fullscreen";
                }
            }
        } 
        else if( global.in[? "m_left_p"] )  
        { 
            if( global.camera.window_zoom == "Fullscreen" )
            {
                global.camera.window_zoom = global.camera.max_window_zoom;
                global.camera.window_zoom = global.camera.before_max;
                window_set_fullscreen(false);
            }
            else 
            {
                global.camera.window_zoom--;
                global.camera.window_zoom = clamp(global.camera.window_zoom, 1, global.camera.max_window_zoom);
                global.camera.before_max = global.camera.window_zoom;
            }
            global.camera.alarm[3] = 1;
        } 
    }
    else if( selection == 1 ) //Fog of War
    {
        if( global.in[? "m_left_p"] or global.in[? "m_right_p"] )
            { global.save[? "fow"] = !global.save[? "fow"]; }
    }
    else if( selection == 2 ) //Fog of War Penetrate
    {
        if( global.in[? "m_left_p"] or global.in[? "m_right_p"] )
            { global.save[? "fow_pen"] = !global.save[? "fow_pen"]; }
    }
    else if( selection == 3 ) //Key bindings selection
    {
        if( global.in[? "d_2_p"] )
        {
            temp_keys = ds_map_create();
            ds_map_copy(temp_keys, global.in_map);
            selection = 0;
            if( global.gp_slot == -1 )
            {
                place = "keys";
                goal_x = views[? "keys_x"];
                goal_y = views[? "keys_y"];
            }
            else 
            {
                place = "buttons";
                goal_x = views[? "buttons_x"];
                goal_y = views[? "buttons_y"];
            }
        }
    }
}
else if( place == "keys" or place == "buttons" )
{
    if( !editing )
    {
        if( global.in[? "m_down_p"] ) 
        { 
            if(selection == -1) { selection = 16; }
            else
            {
                selection++; 
                if( selection == 8 or selection == 16 ) { selection -= 8; } 
                else if( selection == 24 ) { selection = -1; }
            }
        }   
        else if ( global.in[? "m_up_p"] ) 
        { 
            if(selection == -1) { selection = 23; }
            else
            {
                selection--; 
                if( selection == -1 or selection == 7 ) 
                    { selection+=8; }
                else if( selection == 15 ) { selection = -1; }
            }
        } 
        else if ( global.in[? "m_right_p"] ) 
        { 
            if(selection != -1)
            {
                selection+=8; 
                if( selection &gt; 24 ) { selection -= 24; }
            }
        } 
        else if ( global.in[? "m_left_p"] )
        {
            if(selection != -1)
            {
                selection-=8;
                if( selection &lt; 0 ) { selection += 24; }
            }
        }
        //if( selection &lt; 0 ) { selection = 7; } 
        //else if( selection  )
        //else if( selection &gt; 15 ) { selection = 8; } 
        selection = clamp(selection, -1, 23);    
        
        if( global.in[? "d_2_p"] ) 
        { 
            if( selection == -1 ) //On use button
            {
                editing = false;
                selection = 0;
                place = "options";
                goal_x = views[? "options_x"];
                goal_y = views[? "options_y"];
                ds_map_copy(global.in_map, temp_keys);
                ds_map_destroy(temp_keys);            
            }
            else if( ! (selection &gt;= 20 and selection &lt;= 22) ) //Not in the unused segment
            {
                if( global.gp_slot == -1 ) { keyboard_lastkey = -1; } 
                editing = true; 
                input = false;
                alarm[0] = 1;
            }
        }
    }
    
    if( editing and input )
    {
        var back = -1;
        if( global.gp_slot == -1 ) { back = kb_return_press(); }
        else { back = gp_press(); }
        if( back != -1 ) 
        {
            if( global.gp_slot == -1 )
            {
                if( selection == 0 ) { temp_keys[? "k_m_up"] = back; } //Move up
                else if( selection == 1 ) { temp_keys[? "k_m_left"] = back; } //Move left
                else if( selection == 2 ) { temp_keys[? "k_m_down"] = back; } //Move down
                else if( selection == 3 ) { temp_keys[? "k_m_right"] = back; } //Move right
                else if( selection == 4 ) { temp_keys[? "k_l_up"] = back; } //Look up
                else if( selection == 5 ) { temp_keys[? "k_l_left"] = back; } //Look left
                else if( selection == 6 ) { temp_keys[? "k_l_down"] = back; } //Look down
                else if( selection == 7 ) { temp_keys[? "k_l_right"] = back; } //Look right
                else if( selection == 8 ) { temp_keys[? "k_a_4"] = back; } //Interact
                else if( selection == 9 ) { temp_keys[? "k_a_1"] = back; } //Action 1
                else if( selection == 10 ) { temp_keys[? "k_a_2"] = back; } //Action 2
                else if( selection == 11 ) { temp_keys[? "k_a_3"] = back; } //Action 3
                else if( selection == 12 ) { temp_keys[? "k_dodge_1"] = back; } //Dodge 1
                else if( selection == 13 ) { temp_keys[? "k_dodge_2"] = back; } //Dodge 2
                else if( selection == 14 ) { temp_keys[? "k_dodge_3"] = back; } //Dodge 3
                else if( selection == 15 ) { temp_keys[? "k_dodge_4"] = back; } //Dodge 4
                else if( selection == 16 ) { temp_keys[? "k_l_stick"] = back; } //Left stick press
                else if( selection == 17 ) { temp_keys[? "k_r_stick"] = back; } //Right stick press
                else if( selection == 18 ) { temp_keys[? "k_start"] = back; } //Start
                else if( selection == 19 ) { temp_keys[? "k_select"] = back; } //Select
                
                keyboard_lastkey = -1;
            }
            
            else 
            {
                if( selection == 0 ) { temp_keys[? "b_m_up"] = back; } //Move up
                else if( selection == 1 ) { temp_keys[? "b_m_left"] = back; } //Move left
                else if( selection == 2 ) { temp_keys[? "b_m_down"] = back; } //Move down
                else if( selection == 3 ) { temp_keys[? "b_m_right"] = back; } //Move right
                else if( selection == 4 ) { temp_keys[? "b_l_up"] = back; } //Look up
                else if( selection == 5 ) { temp_keys[? "b_l_left"] = back; } //Look left
                else if( selection == 6 ) { temp_keys[? "b_l_down"] = back; } //Look down
                else if( selection == 7 ) { temp_keys[? "b_l_right"] = back; } //Look right
                else if( selection == 8 ) { temp_keys[? "b_a_4"] = back; } //Interact
                else if( selection == 9 ) { temp_keys[? "b_a_1"] = back; } //Action 1
                else if( selection == 10 ) { temp_keys[? "b_a_2"] = back; } //Action 2
                else if( selection == 11 ) { temp_keys[? "b_a_3"] = back; } //Action 3
                else if( selection == 12 ) { temp_keys[? "b_dodge_1"] = back; } //Dodge 1
                else if( selection == 13 ) { temp_keys[? "b_dodge_2"] = back; } //Dodge 2
                else if( selection == 14 ) { temp_keys[? "b_dodge_3"] = back; } //Dodge 3
                else if( selection == 15 ) { temp_keys[? "b_dodge_4"] = back; } //Dodge 4
                else if( selection == 16 ) { temp_keys[? "b_l_stick"] = back; } //Left stick press
                else if( selection == 17 ) { temp_keys[? "b_r_stick"] = back; } //Right stick press
                else if( selection == 18 ) { temp_keys[? "b_start"] = back; } //Start
                else if( selection == 19 ) { temp_keys[? "b_select"] = back; } //Select
            }
            editing = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy temp_keys

if( ds_exists(temp_keys, ds_type_map) ) { ds_map_destroy( temp_keys ); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_alpha(0.4);
draw_set_color(c_black);
draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
draw_set_alpha(1);
*/

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text_shadow(view_wport[0]/2 -x, view_hport[0]/2 -y, "PAUSED", fnt_title, 5, c_black, c_white);

draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
var txt = "";
if( global.gp_slot == -1 ) { txt = translate(global.in_map[? "k_a_4"]); }
else { txt = translate(global.in_map[? "b_a_4"]); }
txt += " &gt;";
draw_text_shadow(view_wport[0]-10 -x, view_hport[0]-10 -y, txt, fnt_menu, 3, c_black, c_white);

draw_set_halign(fa_left);
txt = "&lt; ";
if( global.gp_slot == -1 ) { txt += translate(global.in_map[? "k_a_3"]); }
else { txt += translate(global.in_map[? "b_a_3"]);; }
draw_text_shadow(view_wport[0]+10 -x, view_hport[0]-10 -y, txt, fnt_menu, 3, c_black, c_white);

draw_set_valign(fa_top);

draw_set_halign(fa_center);
draw_text_shadow(view_wport[0]*1.5 -x, 10 -y, "OPTIONS", fnt_menu, 3, c_black, c_white);  
draw_text_shadow(view_wport[0]*1.5 -x, 10+view_hport[0] -y, "KEYBOARD BINDINGS", fnt_menu, 3, c_black, c_white);  
draw_text_shadow(view_wport[0]*1.5 -x, 10-view_hport[0] -y, "GAMEPAD BINDINGS", fnt_menu, 3, c_black, c_white);  

draw_set_halign(fa_left);

draw_set_font(fnt_small);
if(place == "options")
{
    draw_set_color(c_teal);
    draw_rectangle( view_wport[0]+10-x, 10+50+35*(selection)-y, 2*view_wport[0]-x-50, 10+50+35*(selection)-y+string_height("Z"), false);
}

draw_text_shadow(view_wport[0]+10 -x, 10+50+0 -y, "Size", fnt_small, 2, c_black, c_white); 
draw_set_halign(fa_right);
if( window_get_fullscreen() ) { global.camera.window_zoom = "Fullscreen"; }
else { global.camera.window_zoom = global.camera.before_max; }
draw_text_shadow(2*view_wport[0]-75 -x, 10+50+0 -y, string(global.camera.window_zoom), fnt_small, 2, c_black, c_white); 

draw_set_halign(fa_left);
draw_text_shadow(view_wport[0]+10 -x, 10+50+35 -y, "Field of View", fnt_small, 2, c_black, c_white); 
draw_set_halign(fa_right);
if( global.save[? "fow"] ) { draw_text_shadow(2*view_wport[0]-75 -x, 10+50+35 -y, "ON", fnt_small, 2, c_black, c_white); }
else { draw_text_shadow(2*view_wport[0]-75 -x, 10+50+35 -y, "OFF", fnt_small, 2, c_black, c_white); }

draw_set_halign(fa_left);
draw_text_shadow(view_wport[0]+10 -x, 10+50+70 -y, "Sight Penetrate", fnt_small, 2, c_black, c_white); 
draw_set_halign(fa_right);
if( global.save[? "fow_pen"] ) { draw_text_shadow(2*view_wport[0]-75 -x, 10+50+70 -y, "ON", fnt_small, 2, c_black, c_white); }
else { draw_text_shadow(2*view_wport[0]-75 -x, 10+50+70 -y, "OFF", fnt_small, 2, c_black, c_white); }


draw_set_halign(fa_left);
draw_text_shadow(view_wport[0]+10 -x, 10+50+105 -y, "Key Bindings", fnt_small, 2, c_black, c_white); 
draw_set_halign(fa_right);
draw_text_shadow(2*view_wport[0]-75 -x, 10+50+105 -y, "&gt;", fnt_small, 2, c_black, c_white); 


draw_set_font(fnt_medium);
var use_width = string_width("USE")*1.1;
var use_height = string_height("USE")*1.1;


draw_set_font(fnt_small);
if( !editing ) { draw_set_color(c_teal); }
else{ draw_set_color(global.master.my_red); }

if( selection &gt;= 0 and selection  &lt;= 7 )
{
    if( place == "keys" ) { draw_rectangle( view_wport[0]+10-x, 10+50+35*(selection)+view_hport[0]-y, 1.333*view_wport[0]-20-x, 10+50+35*(selection)+view_hport[0]-y+string_height("Z"), false);}
    else if ( place == "buttons" ) { draw_rectangle( view_wport[0]+10-x, 10+50+35*(selection)-view_hport[0]-y, 1.333*view_wport[0]-20-x, 10+50+35*(selection)-view_hport[0]-y+string_height("Z"), false); }
}
else if( selection &gt;= 8 and selection  &lt;= 15 )
{
    if( place == "keys" ) { draw_rectangle( 1.333*view_wport[0]+10-x, 10+50+35*(selection-8)+view_hport[0]-y, 1.666*view_wport[0]-20-x, 10+50+35*(selection-8)+view_hport[0]-y+string_height("Z"), false);}
    else if ( place == "buttons" ) { draw_rectangle( 1.333*view_wport[0]+10-x, 10+50+35*(selection-8)-view_hport[0]-y, 1.666*view_wport[0]-20-x, 10+50+35*(selection-8)-view_hport[0]-y+string_height("Z"), false); }
}
else if( selection &gt;= 16 and selection &lt;= 23 )
{
    if( place == "keys" ) { draw_rectangle( 1.666*view_wport[0]+10-x, 10+50+35*(selection-16)+view_hport[0]-y, 2*view_wport[0]-20-x, 10+50+35*(selection-16)+view_hport[0]-y+string_height("Z"), false);}
    else if ( place == "buttons" ) { draw_rectangle( 1.666*view_wport[0]+10-x, 10+50+35*(selection-16)-view_hport[0]-y, 2*view_wport[0]-20-x, 10+50+35*(selection-16)-view_hport[0]-y+string_height("Z"), false); }
}
else if( selection == -1 )
{
    if( place == "keys" ) { draw_rectangle( 2*view_wport[0]-20-use_width-x, 10+view_hport[0]-y, 2*view_wport[0]-20-x, 10+view_hport[0]-y+use_height, false);}
    else if ( place == "buttons" ) { draw_rectangle( 2*view_wport[0]-20-use_width-x, 10-view_hport[0]-y, 2*view_wport[0]-20-x, 10-view_hport[0]-y+use_height, false); }
}

if( selection != -1 )
{
    draw_set_color( merge_color(c_ltgray, c_dkgray, 0.5) );
    draw_rectangle( 2*view_wport[0]-20-use_width-x, 10+view_hport[0]-y, 2*view_wport[0]-20-x, 10+view_hport[0]-y+use_height, false);
    draw_rectangle( 2*view_wport[0]-20-use_width-x, 10-view_hport[0]-y, 2*view_wport[0]-20-x, 10-view_hport[0]-y+use_height, false);
}
draw_set_color(c_black);
draw_rectangle( 2*view_wport[0]-20-use_width-x, 10+view_hport[0]-y, 2*view_wport[0]-20-x, 10+view_hport[0]-y+use_height, true);
draw_rectangle( 2*view_wport[0]-20-use_width-x, 10-view_hport[0]-y, 2*view_wport[0]-20-x, 10-view_hport[0]-y+use_height, true);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text_shadow(2*view_wport[0]-20-(use_width/2)-x, 10+view_hport[0]+(use_height/2)-y, "USE", fnt_medium, 2, c_black, c_white);
draw_text_shadow(2*view_wport[0]-20-(use_width/2)-x, 10-view_hport[0]+(use_height/2)-y, "USE", fnt_medium, 2, c_black, c_white);



draw_set_valign(fa_top);
draw_set_font(fnt_small);

//KEYBOARD KEY CONFIG
draw_set_halign(fa_left); 
draw_text_shadow(1*view_wport[0]+10 -x, 10+50+view_hport[0] -y, "MOVE UP: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1*view_wport[0]+10 -x, 10+50+35+view_hport[0] -y, "MOVE LEFT: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1*view_wport[0]+10 -x, 10+50+70+view_hport[0] -y, "MOVE DOWN: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1*view_wport[0]+10 -x, 10+50+105+view_hport[0] -y, "MOVE RIGHT: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1*view_wport[0]+10 -x, 10+50+140+view_hport[0] -y, "LOOK UP: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1*view_wport[0]+10 -x, 10+50+175+view_hport[0] -y, "LOOK LEFT: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1*view_wport[0]+10 -x, 10+50+210+view_hport[0] -y, "LOOK DOWN: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1*view_wport[0]+10 -x, 10+50+245+view_hport[0] -y, "LOOK RIGHT: ", fnt_small, 2, c_black, c_white); 

draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+view_hport[0] -y, "INTERACT: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+35+view_hport[0] -y, "ACTION 1: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+70+view_hport[0] -y, "ACTION 2: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+105+view_hport[0] -y, "ACTION 3: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+140+view_hport[0] -y, "DODGE 1: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+175+view_hport[0] -y, "DODGE 2: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+210+view_hport[0] -y, "DODGE 3: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+245+view_hport[0] -y, "DODGE 4: ", fnt_small, 2, c_black, c_white); 

draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+view_hport[0] -y, "L STK PRESS: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+35+view_hport[0] -y, "R STK PRESS: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+70+view_hport[0] -y, "START: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+105+view_hport[0] -y, "SELECT: ", fnt_small, 2, c_black, c_white); 
//draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+140+view_hport[0] -y, "DODGE 1: ", fnt_small, 2, c_black, c_white); 
//draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+175+view_hport[0] -y, "DODGE 2: ", fnt_small, 2, c_black, c_white); 
//draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+210+view_hport[0] -y, "DODGE 3: ", fnt_small, 2, c_black, c_white); 
draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+245+view_hport[0] -y, "RESTORE DEAULTS", fnt_small, 2, c_black, c_white); 

if( place == "keys" or place == "buttons" )
{
    draw_set_halign(fa_right); 
    draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+view_hport[0] -y, translate(temp_keys[? "k_m_up"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+35+view_hport[0] -y, translate(temp_keys[? "k_m_left"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+70+view_hport[0] -y, translate(temp_keys[? "k_m_down"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+105+view_hport[0] -y, translate(temp_keys[? "k_m_right"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+140+view_hport[0] -y, translate(temp_keys[? "k_l_up"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+175+view_hport[0] -y, translate(temp_keys[? "k_l_left"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+210+view_hport[0] -y, translate(temp_keys[? "k_l_down"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+245+view_hport[0] -y, translate(temp_keys[? "k_l_right"]), fnt_small, 2, c_black, c_white); 
    
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+view_hport[0] -y, translate(temp_keys[? "k_a_4"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+35+view_hport[0] -y, translate(temp_keys[? "k_a_1"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+70+view_hport[0] -y, translate(temp_keys[? "k_a_2"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+105+view_hport[0] -y, translate(temp_keys[? "k_a_3"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+140+view_hport[0] -y, translate(temp_keys[? "k_dodge_1"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+175+view_hport[0] -y, translate(temp_keys[? "k_dodge_2"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+210+view_hport[0] -y, translate(temp_keys[? "k_dodge_3"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+245+view_hport[0] -y, translate(temp_keys[? "k_dodge_4"]), fnt_small, 2, c_black, c_white); 
    
    draw_text_shadow(2*view_wport[0]-25 -x, 10+50+view_hport[0] -y, translate(temp_keys[? "k_l_stick"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(2*view_wport[0]-25 -x, 10+50+35+view_hport[0] -y, translate(temp_keys[? "k_r_stick"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(2*view_wport[0]-25 -x, 10+50+70+view_hport[0] -y, translate(temp_keys[? "k_start"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(2*view_wport[0]-25 -x, 10+50+105+view_hport[0] -y, translate(temp_keys[? "k_select"]), fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(2*view_wport[0]-25 -x, 10+50+140+view_hport[0] -y, translate(temp_keys[? "k_dodge_1"]), fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(2*view_wport[0]-25 -x, 10+50+175+view_hport[0] -y, translate(temp_keys[? "k_dodge_2"]), fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(2*view_wport[0]-25 -x, 10+50+210+view_hport[0] -y, translate(temp_keys[? "k_dodge_3"]), fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(2*view_wport[0]-25 -x, 10+50+245+view_hport[0] -y, translate(temp_keys[? "k_dodge_4"]), fnt_small, 2, c_black, c_white); 
    
    
    
    //GAMEPAD KEY CONFIG
    draw_set_halign(fa_left); 
    draw_text_shadow(1*view_wport[0]+10 -x, 10+50-view_hport[0] -y, "MOVE UP: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1*view_wport[0]+10 -x, 10+50+35-view_hport[0] -y, "MOVE LEFT: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1*view_wport[0]+10 -x, 10+50+70-view_hport[0] -y, "MOVE DOWN: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1*view_wport[0]+10 -x, 10+50+105-view_hport[0] -y, "MOVE RIGHT: ", fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(1*view_wport[0]+10 -x, 10+50+140-view_hport[0] -y, "LOOK UP: ", fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(1*view_wport[0]+10 -x, 10+50+175-view_hport[0] -y, "LOOK LEFT: ", fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(1*view_wport[0]+10 -x, 10+50+210-view_hport[0] -y, "LOOK DOWN: ", fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(1*view_wport[0]+10 -x, 10+50+245-view_hport[0] -y, "LOOK RIGHT: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1*view_wport[0]+10 -x, 10+50+140-view_hport[0] -y, "LOOK HORIZONTAL: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1*view_wport[0]+10 -x, 10+50+175-view_hport[0] -y, "LOOK VERTICAL: ", fnt_small, 2, c_black, c_white); 
    
    draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50-view_hport[0] -y, "INTERACT: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+35-view_hport[0] -y, "ACTION 1: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+70-view_hport[0] -y, "ACTION 2: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+105-view_hport[0] -y, "ACTION 3: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+140-view_hport[0] -y, "DODGE 1: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+175-view_hport[0] -y, "DODGE 2: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+210-view_hport[0] -y, "DODGE 3: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]+10 -x, 10+50+245-view_hport[0] -y, "DODGE 4: ", fnt_small, 2, c_black, c_white); 
    
    draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50-view_hport[0] -y, "L STK PRESS: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+35-view_hport[0] -y, "R STK PRESS: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+70-view_hport[0] -y, "START: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+105-view_hport[0] -y, "SELECT: ", fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+140-view_hport[0] -y, "DODGE 1: ", fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+175-view_hport[0] -y, "DODGE 2: ", fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+210-view_hport[0] -y, "DODGE 3: ", fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]+10 -x, 10+50+245-view_hport[0] -y, "RESTORE DEAULTS", fnt_small, 2, c_black, c_white); 
    
    
    draw_set_halign(fa_right); 
    draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50-view_hport[0] -y, translate(temp_keys[? "b_m_up"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+35-view_hport[0] -y, translate(temp_keys[? "b_m_left"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+70-view_hport[0] -y, translate(temp_keys[? "b_m_down"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+105-view_hport[0] -y, translate(temp_keys[? "b_m_right"]), fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+140-view_hport[0] -y, translate(temp_keys[? "b_l_up"]), fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+175-view_hport[0] -y, translate(temp_keys[? "b_l_left"]), fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+210-view_hport[0] -y, translate(temp_keys[? "b_l_down"]), fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+245-view_hport[0] -y, translate(temp_keys[? "b_l_right"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+140-view_hport[0] -y, translate(temp_keys[? "look_stick_horizontal"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.333*view_wport[0]-25 -x, 10+50+175-view_hport[0] -y, translate(temp_keys[? "look_stick_horizontal"]), fnt_small, 2, c_black, c_white); 
    
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50-view_hport[0] -y, translate(temp_keys[? "b_a_4"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+35-view_hport[0] -y, translate(temp_keys[? "b_a_1"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+70-view_hport[0] -y, translate(temp_keys[? "b_a_2"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+105-view_hport[0] -y, translate(temp_keys[? "b_a_3"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+140-view_hport[0] -y, translate(temp_keys[? "b_dodge_1"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+175-view_hport[0] -y, translate(temp_keys[? "b_dodge_2"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+210-view_hport[0] -y, translate(temp_keys[? "b_dodge_3"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(1.666*view_wport[0]-25 -x, 10+50+245-view_hport[0] -y, translate(temp_keys[? "b_dodge_4"]), fnt_small, 2, c_black, c_white); 
    
    draw_text_shadow(2*view_wport[0]-25 -x, 10+50-view_hport[0] -y, translate(temp_keys[? "b_l_stick"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(2*view_wport[0]-25 -x, 10+50+35-view_hport[0] -y, translate(temp_keys[? "b_r_stick"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(2*view_wport[0]-25 -x, 10+50+70-view_hport[0] -y, translate(temp_keys[? "b_start"]), fnt_small, 2, c_black, c_white); 
    draw_text_shadow(2*view_wport[0]-25 -x, 10+50+105-view_hport[0] -y, translate(temp_keys[? "b_select"]), fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(2*view_wport[0]-25 -x, 10+50+140-view_hport[0] -y, translate(temp_keys[? "b_dodge_1"]), fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(2*view_wport[0]-25 -x, 10+50+175-view_hport[0] -y, translate(temp_keys[? "b_dodge_2"]), fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(2*view_wport[0]-25 -x, 10+50+210-view_hport[0] -y, translate(temp_keys[? "b_dodge_3"]), fnt_small, 2, c_black, c_white); 
    //draw_text_shadow(2*view_wport[0]-25 -x, 10+50+245-view_hport[0] -y, translate(temp_keys[? "b_dodge_4"]), fnt_small, 2, c_black, c_white); 
}

draw_set_halign(fa_left); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
